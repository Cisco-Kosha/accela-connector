{
  "openapi": "3.0.3",
  "info": {
    "description": "Accela OpenAPI Specification",
    "title": "Accela API",
    "version": "v4"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "A record is a fundamental Civic Platform object that captures an agency's daily process tranactions, such as applications, permits, cases, licenses, service requests, and work orders.",
      "name": "Records"
    },
    {
      "description": "Activities related to a record can be assigned to a staff member when the activities require further action, such as a follow-up inspection or service maintenance.",
      "name": "Records/Activities"
    },
    {
      "description": "A record can have at least one associated address, such as the address of the application contact or the location of a permit application, service request, or work order.",
      "name": "Records/Addresses"
    },
    {
      "name": "Records/Addresses/Custom Forms"
    },
    {
      "description": "A work order record is linked to assets that require inspection, repair service, or any kind of task that needs to be performed and tracked in the system.",
      "name": "Records/Assets"
    },
    {
      "description": "A staff user can add comments regarding the record, or can choose from standard comments that have been configured for the agency.",
      "name": "Records/Comments"
    },
    {
      "description": "A condition is a requirement that you can apply to an application (or component of an application), that the application must fulfill to qualify for approval. Although conditions do not necessarily impose holds, they can prolong the permitting process until they met.",
      "name": "Records/Conditions"
    },
    {
      "name": "Records/Condition Approvals"
    },
    {
      "description": "One or more reference contacts can be associated to an application or service request.",
      "name": "Records/Contacts"
    },
    {
      "name": "Records/Contacts/Custom Forms"
    },
    {
      "name": "Records/Contacts/Custom Tables"
    },
    {
      "name": "Records/Costs"
    },
    {
      "name": "Records/Custom Forms"
    },
    {
      "name": "Records/Custom Tables"
    },
    {
      "name": "Records/Documents"
    },
    {
      "name": "Records/Fees"
    },
    {
      "name": "Records/Inspections"
    },
    {
      "name": "Records/Invoices"
    },
    {
      "name": "Records/Owners"
    },
    {
      "name": "Records/Parcels"
    },
    {
      "name": "Records/Part Transactions"
    },
    {
      "name": "Records/Payments"
    },
    {
      "name": "Records/Professionals"
    },
    {
      "name": "Records/Trust Accounts"
    },
    {
      "name": "Records/Workflows"
    }
  ],
  "paths": {
    "/v4/announcements": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "description": "Filter by whether or not the announcement has been read.",
            "in": "query",
            "name": "isRead",
            "schema": {
              "enum": [
                "Y",
                "N"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_messageModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Announcements"
        ],
        "description": "Gets all public announcements in the system.\n\n\n\n**API Endpoint**:  GET /v4/announcements \n\n**Scope**:  announcements \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3\n\n",
        "operationId": "v4.get.announcements",
        "summary": "Get All Announcements"
      }
    },
    "/v4/announcements/{ids}/read": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of announcements to update.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Announcements"
        ],
        "description": "Updates announcements to indicate that that the user has read the announcement.\n\n\n\n**API Endpoint**:  PUT /v4/announcements/{ids}/read \n\n**Scope**:  announcements \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.put.announcements.ids.read",
        "summary": "Mark Announcements as Read"
      }
    },
    "/v4/citizenaccess/citizens": {
      "get": {
        "parameters": [
          {
            "description": "Filter by the citizen's login name.",
            "in": "query",
            "name": "loginName",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.",
            "in": "query",
            "name": "expand",
            "schema": {
              "enum": [
                "contacts"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_publicUserModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users' profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.citizenaccess.citizens",
        "summary": "Get Citizen Users"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.\n\n\n\n**API Endpoint**:  POST /v4/citizenaccess/citizens \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.post.citizenaccess.citizens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicUserRegisterModel"
              }
            }
          },
          "description": "The user information to add.",
          "required": true
        },
        "summary": "Create Citizen User"
      }
    },
    "/v4/citizenaccess/citizens/delegatePrivileges": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_delegatePrivilegeModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Management"
        ],
        "description": "Gets the privileges of the citizen delegates associated to the logged-in user.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.get.citizenaccess.citizens.delegatePrivileges",
        "summary": "Get Citizen Delegate Privileges"
      }
    },
    "/v4/citizenaccess/citizens/delegates": {
      "get": {
        "parameters": [
          {
            "description": "Filter by the delegate's login name.",
            "in": "query",
            "name": "userName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the delegate's name.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the delegate status.",
            "in": "query",
            "name": "delegateStatus",
            "required": false,
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPT",
                "REJECT",
                "EXPIRED"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_publicUserDelegateModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Management"
        ],
        "description": "Gets the citizen users delegated by the logged-in user.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens/delegates \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.get.citizenaccess.citizens.delegates",
        "summary": "Get All Delegates"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Management"
        ],
        "description": "Creates the specified delegate users. The Create Delegates API allows the logged-in user to send delegate requests to one or more users, as specified in the request array. The specified userNames must be valid citizen users. The logged-in user cannot send more than one delegate request to the same userName. For each new delegate, the delegateStatus is set to PENDING. The citizen user receiving the delegate request will need to accept the delegate request (via Update Invitation API) to enable the assigned permissions. If the citizen user rejects the invitation (via Update Invitation API) , the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.\n\n\n\n**API Endpoint**:  POST /v4/citizenaccess/citizens/delegates \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.post.citizenaccess.citizens.delegates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/request_publicUserDelegateModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Delegate information to add.",
          "required": true
        },
        "summary": "Create Delegates"
      }
    },
    "/v4/citizenaccess/citizens/delegates/{ids}": {
      "delete": {
        "parameters": [
          {
            "description": "Comma-delimited IDs of delegates to delete.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultCountModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Management"
        ],
        "description": "Deletes the specified delegates whom the logged-in user has delegated.\n\n\n\n**API Endpoint**:  DELETE /v4/citizenaccess/citizens/delegates/{ids} \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.delete.citizenaccess.citizens.delegates.ids",
        "summary": "Delete Delegates"
      }
    },
    "/v4/citizenaccess/citizens/invitation/{id}": {
      "put": {
        "parameters": [
          {
            "description": "The id of the citizen user who sent the delegate request.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_publicUserDelegateStatusModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Invitations"
        ],
        "description": "Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.\n\n\n\n**API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}  \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.put.citizenaccess.citizens.invitation.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicUserDelegateStatusModel"
              }
            }
          },
          "description": "Delegate information including the delegate status to be updated.",
          "required": true
        },
        "summary": "Update Invitation"
      }
    },
    "/v4/citizenaccess/citizens/invitations": {
      "get": {
        "parameters": [
          {
            "description": "Filter by the delegate's login name.",
            "in": "query",
            "name": "userName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the delegate's name.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the delegate status.",
            "in": "query",
            "name": "delegateStatus",
            "required": false,
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPT",
                "REJECT",
                "EXPIRED"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_publicUserDelegateModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Delegate Invitations"
        ],
        "description": "Gets invitations or delegate requests received by the logged-in user. To get the logged-in user's pending invitations, set the {delegateStatus} parameter to PENDING.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens/invitations \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.5\n\n",
        "operationId": "v4.get.citizenaccess.citizens.invitations",
        "summary": "Get All Invitations"
      }
    },
    "/v4/citizenaccess/citizens/{id}": {
      "put": {
        "parameters": [
          {
            "description": "The clerk citizen ID to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_citizenProfileModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Updates the profile of the specified citizen user.\n\n\n\n**API Endpoint**:  PUT /v4/citizenaccess/citizens/{id} \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.put.citizens.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_citizenProfileModel"
              }
            }
          },
          "description": "User profile information to be updated",
          "required": true
        },
        "summary": "Update Citizen Profile"
      }
    },
    "/v4/citizenaccess/citizens/{id}/accounts": {
      "get": {
        "parameters": [
          {
            "description": "The ID of citizen user to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_userPINModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Gets the status of the citizen accounts associated to the specified user.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.citizenaccess.citizens.id.accounts",
        "summary": "Get Citizen Accounts"
      },
      "put": {
        "parameters": [
          {
            "description": "The ID of citizen user to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Updates the status of citizen accounts associated to the specified citizen user.\n\n\n\n**API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.put.citizenaccess.citizens.id.accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/userPINModel"
                },
                "type": "array"
              }
            }
          },
          "description": "The user information to be updated.",
          "required": true
        },
        "summary": "Update Citizen Account Status"
      }
    },
    "/v4/citizenaccess/citizens/{id}/contacts": {
      "post": {
        "parameters": [
          {
            "description": "The clerk ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultCountModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.\n\n\n\n**API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts  \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.post.citizens.id.contacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "description": "A reference contact id.",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "An array of reference contact Ids to add.",
          "required": true
        },
        "summary": "Add Citizen Contacts"
      }
    },
    "/v4/citizenaccess/citizens/{id}/contacts/{contactIds}": {
      "delete": {
        "parameters": [
          {
            "description": "The clerk ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-delimited IDs of contacts to delete.",
            "in": "path",
            "name": "contactIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultCountModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Deletes the specified contacts for the specified citizen user.\n\n\n\n**API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds} \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.delete.citizens.id.contacts.contactIds",
        "summary": "Delete Citizen Contacts"
      }
    },
    "/v4/citizenaccess/citizens/{id}/password": {
      "put": {
        "parameters": [
          {
            "description": "The clerk citizen ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "result": {
                      "properties": {
                        "id": {
                          "description": "The citizen id.",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "The HTTP return status.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Updates the password of the specified citizen user {id}.\n\n\n\n**API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.put.citizens.id.password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicUserPasswordModel"
              }
            }
          },
          "description": "The password to update."
        },
        "summary": "Update Citizen Password"
      }
    },
    "/v4/citizenaccess/citizens/{id}/trustAccounts": {
      "get": {
        "parameters": [
          {
            "description": "The ID of citizen user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_trustAccountModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access User Management"
        ],
        "description": "Gets the trust accounts for the specified user. If a clerk needs the associated agent's trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.citizenaccess.citizens.id.trustAccounts",
        "summary": "Get Citizen Trust Accounts"
      }
    },
    "/v4/citizenaccess/contacts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/citizenContactModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Self-Registration"
        ],
        "description": "Gets the contacts for the currently logged in citizen user.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/contacts \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.civicid.citizenaccess.contacts",
        "summary": "Get My Contacts"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultCountModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Self-Registration"
        ],
        "description": "Adds contacts to the currently logged in citizen user.\n\n\n\n**API Endpoint**:  POST /v4/citizenaccess/contacts \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.post.civicid.citizenaccess.contacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "description": "A reference contact id.",
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "An array of reference contact IDs to add.",
          "required": true
        },
        "summary": "Create My Contacts"
      }
    },
    "/v4/citizenaccess/contacts/{ids}": {
      "delete": {
        "parameters": [
          {
            "description": "Comma-delimited IDs of contacts to delete.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultCountModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Self-Registration"
        ],
        "description": "Deletes the specified contacts from the currently logged in user.\n\n\n\n**API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids} \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.delete.civicid.citizenaccess.contacts.ids",
        "summary": "Delete My Contacts"
      }
    },
    "/v4/citizenaccess/profile": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/citizenProfileModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Self-Registration"
        ],
        "description": "Gets the profile for the currently logged in citizen user.\n\n\n\n**API Endpoint**:  GET /v4/citizenaccess/profile \n\n**Scope**:  users \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.civicid.citizenaccess.profile",
        "summary": "Get My Citizen Profile"
      }
    },
    "/v4/citizenaccess/register": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_publicUserRegisterModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Citizen Access Self-Registration"
        ],
        "description": "Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.\n\n\n\n**API Endpoint**:  POST /v4/citizenaccess/register \n\n**Scope**:  users \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.post.citizenaccess.register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicUserRegisterModel"
              }
            }
          },
          "description": "The user profile to register."
        },
        "summary": "Register Citizen"
      }
    },
    "/v4/assessments/mine": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetConditionAssessmentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments"
        ],
        "description": "Returns the condition assessments assigned to the currently logged-in agency user.\n\n\n\n**API Endpoint**:  GET /v4/assessments/mine \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.mine",
        "summary": "Get My Condition Assessments"
      }
    },
    "/v4/assessments/{assessmentId}/documents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assessmentIdPathParam"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_documentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Documents"
        ],
        "description": "Returns the documents for a given condition assessment.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{assessmentId}/documents \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.assessmentId.documents",
        "summary": "Get All Assessment Documents"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assessmentIdPathParam"
          },
          {
            "description": "The document group.",
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document category.",
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EDMS Adapter userid. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EMDS Adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Documents"
        ],
        "description": "Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \"Content-Type:multipart/form-data\" and form-data for \"uploadedFile\" and \"fileInfo\". Note that the \"fileInfo\" is a string containing an array of file attributes. Use \"fileInfo\" to specify one or more documents to be attached. For example:\n\n\tContent - Disposition: form - data;name = \"uploadedFile\"; filename=\"summaryReport.pdf\"\n\n\tContent - Disposition: form - data;name = \"fileInfo\"\n\n\t[\n\t\t {\n\t\t\t\"serviceProviderCode\": \"BPTDEV\",\n\t\t\t\"fileName\": \"CXA12-pipe.png\",\n\t\t\t\"type\": \"image/png\",\n\t\t\t\"description\": \"Condition assessment on pipe\"\n\t\t}\n\t]\n\n\n\n\n\n\n\n**API Endpoint**:  POST /v4/assessments/{assessmentId}/documents \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.post.assessments.assessmentId.documents",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileInfo": {
                    "description": "A string array containing the file metadata for each specified filename. See example for details.",
                    "type": "string"
                  }
                },
                "required": [
                  "fileInfo"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create Assessment Documents"
      }
    },
    "/v4/assessments/{assessmentId}/documents/{documentIds}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assessmentIdPathParam"
          },
          {
            "description": "Comma-delimited IDs of the documents to be deleted.",
            "in": "path",
            "name": "documentIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EDMS adapter userid. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EDMS adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Documents"
        ],
        "description": "Deletes one or more documents for the given condition assessment.\n\n\n\n**API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds} \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.assessments.assessmentId.documents.documentIds",
        "summary": "Delete Assessment Documents"
      }
    },
    "/v4/assessments/{caId}/records": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the condition assessment to fetch.",
            "in": "path",
            "name": "caId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types).",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record status. See [Get All Record Type Statuses](./api-settings.html#operation/v4.get.settings.records.types.id.statuses).",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Work Orders"
        ],
        "description": "Returns the work order records associated to a given condition assessment.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{caId}/records \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.caId.records",
        "summary": "Get All Records for an Assessment"
      }
    },
    "/v4/assessments/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of the condition assessments to be deleted",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments"
        ],
        "description": "Deletes one or more condition assessments.\n\n\n\n**API Endpoint**:  DELETE /v4/assessments/{ids} \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.assessments.ids",
        "summary": "Delete Assessments"
      }
    },
    "/v4/assessments/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetConditionAssessmentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments"
        ],
        "description": "Gets condition assessment information for one or more given assessments, identified in comma-separated {ids}.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{id}  \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.id",
        "summary": "Get Assessments"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments"
        ],
        "description": "Updates a given condition assessment.\n\n\n\n**API Endpoint**:  PUT /v4/assessments/{id} \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.put.assessments.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_assessmentModel"
              }
            }
          },
          "description": "The assessment information to be updated.",
          "required": true
        },
        "summary": "Update Assessment"
      }
    },
    "/v4/assessments/{id}/attributes/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_attributeMetadataModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Attributes"
        ],
        "description": "Returns the custom attributes metadata of the condition assessment type. The attributes metadata is configured for the condition assessment type in Civic Platform Administration.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{id}/attributes/meta \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.id.attributes.meta",
        "summary": "Get Attributes Metadata for Condition Assessment Type"
      }
    },
    "/v4/assessments/{id}/observations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Observations"
        ],
        "description": "Returns observation data associated to a given condition assessment.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{id}/observations \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.id.observations",
        "summary": "Get Condition Assessment Observations"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the observation to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Observations"
        ],
        "description": "Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:\n 1.For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).\n 2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).\n\n\n\n**API Endpoint**:  PUT /v4/assessments/{id}/observations \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.put.assessments.id.observations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Observation information to be updated.",
          "required": true
        },
        "summary": "Update Assessment Observations"
      }
    },
    "/v4/assessments/{id}/observations/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_attributeMetadataModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Observations"
        ],
        "description": "Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.\n\n\n\n**API Endpoint**:  GET /v4/assessments/{id}/observations/meta \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assessments.id.observations.meta",
        "summary": "Get Observations Metadata for Condition Assessment Type"
      }
    },
    "/v4/assessments/{id}/workorders": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssessmentPathParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assessments/Work Orders"
        ],
        "description": "Adds or links work orders to a given condition assessment.\n\n\n\n**API Endpoint**:  POST /v4/assessments/{id}/workorders \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.post.assessments.id.workorders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "An array of work order record IDs to be linked to the assessment. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).",
          "required": true
        },
        "summary": "Add Work Orders to Condition Assessments"
      }
    },
    "/v4/assets": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Filter by asset ID. ",
            "in": "query",
            "name": "assetId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by asset name.",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by asset group. See [Get All Asset Groups](./api-settings.html#operation/v4.get.settings.assets.groups).",
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by asset type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetMasterModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Returns all assets. Specify at least one URI filter parameter: asssetId, group, type, name.\n\n\n\n**API Endpoint**:  GET /v4/assets \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets",
        "summary": "Get All Assets"
      }
    },
    "/v4/assets/records": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The IDs of the assets.",
            "in": "query",
            "name": "assetIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetsRecordsModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Records"
        ],
        "description": "Gets the list of records associated with the given asset ID(s). \n\n\n\n**API Endpoint**:  GET /v4/assets/records?assetIds={assetIds} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t22.1.0\n\n",
        "operationId": "v4.get.assets.records",
        "summary": "Get Records By Asset Ids"
      }
    },
    "/v4/assets/{assetId}/documents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assetIdPathParam"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_documentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Documents"
        ],
        "description": "Returns all documents for a given asset.\n\n\n\n**API Endpoint**:  GET /v4/assets/{assetId}/documents \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets.assetId.documents",
        "summary": "Get All Asset Documents"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assetIdPathParam"
          },
          {
            "description": "The document group.",
            "in": "query",
            "name": "group",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document category.",
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EDMS Adapter User ID. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EMDS Adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Documents"
        ],
        "description": "Creates one or more document attachments for the given asset. To specify the documents to be attached, use the HTTP header \"Content-Type:multipart/form-data\" and form-data for \"uploadedFile\" and \"fileInfo\". Note that the \"fileInfo\" is a string containing an array of file attributes. Use \"fileInfo\" to specify one or more documents to be attached. For example:\n\n\tContent - Disposition: form - data;name = \"uploadedFile\"; filename=\"summaryReport.pdf\"\n\n\tContent - Disposition: form - data;name = \"fileInfo\"\n\n\t[\n\t\t {\n\t\t\t\"serviceProviderCode\": \"BPTDEV\",\n\t\t\t\"fileName\": \"CXA12-pipe.png\",\n\t\t\t\"type\": \"image/png\",\n\t\t\t\"description\": \"Inspected pipe\"\n\t\t}\n\t]\n\n\n\n \n\n\n\n**API Endpoint**:  POST /v4/assets/{assetId}/documents \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.post.assets.assetId.documents",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileInfo": {
                    "description": "A string array containing the file metadata for each specified filename. See example for details.",
                    "type": "string"
                  }
                },
                "required": [
                  "fileInfo"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create Asset Documents"
      }
    },
    "/v4/assets/{assetId}/documents/{documentIds}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assetIdPathParam"
          },
          {
            "description": "Comma-delimited IDs of documents to be deleted.",
            "in": "path",
            "name": "documentIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EDMS Adapter userid. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The standard EDMS Adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Documents"
        ],
        "description": "Deletes one or more documents for the given asset.\n\n\n\n**API Endpoint**:  DELETE /v4/assets/{assetId}/documents/{documentIds} \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.assets.assetId.documents.documentIds",
        "summary": "Delete Asset Documents"
      }
    },
    "/v4/assets/{assetId}/records": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/assetIdPathParam"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Records"
        ],
        "description": "Returns all records for a given asset.\n\n\n\n**API Endpoint**:  GET /v4/assets/{assetId}/records \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets.assetId.records",
        "summary": "Get All Asset Records"
      }
    },
    "/v4/assets/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of assets to delete.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Deletes one or more assets.\n\n\n\n**API Endpoint**:  DELETE /v4/assets/{ids} \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.assets.ids",
        "summary": "Delete Assets"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of assets to fetch.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.",
            "in": "query",
            "name": "expand",
            "schema": {
              "enum": [
                "records"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetExtModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Returns asset information for one or more given assets, identified in comma-separated {ids}. Associated records can be requested via the expand parameter.\n\n\n\n**API Endpoint**:  GET /v4/assets/{ids} \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets.ids",
        "summary": "Get Assets"
      }
    },
    "/v4/assets/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssetPathParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Updates a given asset.\n\n\n\n**API Endpoint**:  PUT /v4/assets/{id} \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.put.assets.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assetWithAttributesModel"
              }
            }
          },
          "description": "The asset information to be updated.",
          "required": true
        },
        "summary": "Update Asset"
      }
    },
    "/v4/assets/{id}/assessments": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssetPathParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Assessments"
        ],
        "description": "Creates condition assessments for a given asset.\n\n\n\n**API Endpoint**:  POST /v4/assets/{id}/assessments \n\n**Scope**:  assessments \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.post.assets.id.assessments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_assessmentModel"
              }
            }
          },
          "description": "Asset attributes to be added. Ex. [{ \"field1\": \"field1Val\", \"field2\": \"field2Val\"}]",
          "required": true
        },
        "summary": "Create Asset Assessment"
      }
    },
    "/v4/assets/{id}/attributes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/idAssetPathParam"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Attributes"
        ],
        "description": "Returns the custom attribute values for a given asset. The custom attributes are configured in an attribute template which is assigned to the asset type in Civic Platform Administration.\n\n\n\n**API Endpoint**:  GET /v4/assets/{id}/attributes \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "",
        "summary": "Get Asset Custom Attributes"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the asset to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Attributes"
        ],
        "description": "Updates the custom attributes for a given asset. The response returns an array containing any custom attribute validation error and the status of the asset update.\n\n\n\n**API Endpoint**:  PUT /v4/assets/{id}/attributes \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.put.assets.id.attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customAttributeModel"
              }
            }
          },
          "description": "The custom attributes to be updated. Ex. [{ \"field1\": \"field1Val\", \"field2\": \"field2Val\"}]",
          "required": true
        },
        "summary": "Update Asset Custom Attributes"
      }
    },
    "/v4/assets/{id}/attributes/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the asset to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_attributeMetadataModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets/Attributes"
        ],
        "description": "Returns an array containing the metadata of the asset custom attributes. The metadata is configured in an attributes template which is assigned to the asset type in Civic Platform Administration.\n\n\n\n**API Endpoint**:  GET /v4/assets/{id}/attributes/meta \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets.id.attributes.meta",
        "summary": "Get Metadata of Asset Custom Attributes"
      }
    },
    "/v4/assets/{id}/linkedAssets": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the asset whose linked assets need to be fetched.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.",
            "in": "query",
            "name": "expand",
            "schema": {
              "enum": [
                "records"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetRelatedModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Returns all linked assets for a given asset ID.\n\n\n\n**API Endpoint**:  GET /v4/assets/{id}/linkedAssets \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.assets.id.linkedAssets",
        "summary": "Get All Linked Assets"
      }
    },
    "/v4/assets/{id}/usages": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the asset.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetUsageModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Assets"
        ],
        "description": "Create Asset Usages.\n\n\n\n**API Endpoint**:  POST /v4/assets/{id}/usages \n\n**Scope**:  assets \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 22.1.0\n\n",
        "operationId": "v4.post.assets.id.usages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_assetUsageModel"
              }
            }
          },
          "description": "The asset information to be created.",
          "required": true
        },
        "summary": "Create Asset Usages"
      }
    },
    "/v4/records": {
      "get": {
        "parameters": [
          {
            "description": "Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types).",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's open date range, beginning with this date.",
            "in": "query",
            "name": "openedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's open date range, ending with this date.",
            "in": "query",
            "name": "openedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record custom id.",
            "in": "query",
            "name": "customId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "in": "query",
            "name": "module",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record status.",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the assigned department.",
            "in": "query",
            "name": "assignedToDepartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the assigned user.",
            "in": "query",
            "name": "assignedUser",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's assigned date range starting with this date.",
            "in": "query",
            "name": "assignedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's assigned date range ending with this date.",
            "in": "query",
            "name": "assignedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's completed date range starting with this date.",
            "in": "query",
            "name": "completedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's completed date range ending with this date.",
            "in": "query",
            "name": "completedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's status date range starting with this date.",
            "in": "query",
            "name": "statusDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's status date range ending with this date.",
            "in": "query",
            "name": "statusDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the deparment which completed the application.",
            "in": "query",
            "name": "completedByDepartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the user who completed the application.",
            "in": "query",
            "name": "completedByUser",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's closed date range starting with this date.",
            "in": "query",
            "name": "closedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's closed date range ending with this date.",
            "in": "query",
            "name": "closedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the department which closed the application.",
            "in": "query",
            "name": "closedByDepartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the user who closed the application.",
            "in": "query",
            "name": "closedByUser",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record class",
            "in": "query",
            "name": "recordClass",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets record information, based on the specified query parameters.\n\n\n\n**API Endpoint**:  GET /v4/records \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records",
        "summary": "Get All Records"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter. \n\n Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request.\n\n\n\n**API Endpoint**:  POST /v4/records \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_createRecordModel"
              }
            }
          },
          "description": "The create record information to be added."
        },
        "summary": "Create Record"
      }
    },
    "/v4/records/describe/create": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_describeRecordModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets the field and element values the system requires in order to create a specific type of record.\n\n\n\n**API Endpoint**:  GET /v4/records/describe/create  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.get.records.describe.create",
        "summary": "Describe Required Record Attributes"
      }
    },
    "/v4/records/initialize": {
      "post": {
        "parameters": [
          {
            "description": "Indicates whether or not it is for a fee estimate.",
            "in": "query",
            "name": "isFeeEstimate",
            "required": false,
            "schema": {
              "enum": [
                "true",
                " false"
              ],
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.  \n\nThe Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter. \n\nNote: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests.\n\n\n\n**API Endpoint**:  POST /v4/records/initialize \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.post.records.initialize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_recordModel"
              }
            }
          },
          "description": "The record information to be initialized.",
          "required": true
        },
        "summary": "Create Partial Record"
      }
    },
    "/v4/records/mine": {
      "get": {
        "parameters": [
          {
            "description": "Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types).",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's open date range, beginning with this date.",
            "in": "query",
            "name": "openedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's open date range, ending with this date.",
            "in": "query",
            "name": "openedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record custom id.",
            "in": "query",
            "name": "customId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "in": "query",
            "name": "module",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record status.",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's assigned date range starting with this date.",
            "in": "query",
            "name": "assignedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's assigned date range ending with this date.",
            "in": "query",
            "name": "assignedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's completed date range starting with this date.",
            "in": "query",
            "name": "completedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's completed date range ending with this date.",
            "in": "query",
            "name": "completedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's status date range starting with this date.",
            "in": "query",
            "name": "statusDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's status date range ending with this date.",
            "in": "query",
            "name": "statusDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record update Date From",
            "in": "query",
            "name": "updateDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Record update Date To",
            "in": "query",
            "name": "updateDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the deparment which completed the application.",
            "in": "query",
            "name": "completedByDepartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the user who completed the application.",
            "in": "query",
            "name": "completedByUser",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's closed date range starting with this date.",
            "in": "query",
            "name": "closedDateFrom",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the record's closed date range ending with this date.",
            "in": "query",
            "name": "closedDateTo",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the department which closed the application.",
            "in": "query",
            "name": "closedByDepartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the user who closed the application.",
            "in": "query",
            "name": "closedByUser",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by record class",
            "in": "query",
            "name": "recordClass",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by comma-separated multiple record types.",
            "in": "query",
            "name": "types",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by comma-separated multiple modules.",
            "in": "query",
            "name": "modules",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by comma-separated multiple record status types.",
            "in": "query",
            "name": "statusTypes",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.",
            "in": "query",
            "name": "expand",
            "schema": {
              "enum": [
                "addresses",
                "parcels",
                "professionals",
                "contacts",
                "owners",
                "customForms",
                "customTables"
              ],
              "type": "string"
            }
          },
          {
            "description": "Valid values: \"addresses\"\n          \nIf {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source.\n\nAdded in Civic Platform version: 9.2.0\n",
            "in": "query",
            "name": "expandCustomForms",
            "schema": {
              "enum": [
                "addresses"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordExtModel_1Array"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets records for the currently logged-in user.\n\n\n\n**API Endpoint**:  GET /v4/records/mine \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.mine",
        "summary": "Get My Records"
      }
    },
    "/v4/records/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of the records to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Deletes the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.3\n\n",
        "operationId": "v4.delete.records.ids",
        "summary": "Delete Records"
      },
      "get": {
        "parameters": [
          {
            "description": "Comma-delimited IDs of the records to fetch.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.",
            "in": "query",
            "name": "expand",
            "schema": {
              "enum": [
                "addresses",
                "parcels",
                "professionals",
                "contacts",
                "owners",
                "customForms",
                "customTables",
                "assets"
              ],
              "type": "string"
            }
          },
          {
            "description": "Valid values: \"addresses\"\n\nIf {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source.\n\nAdded in Civic Platform version: 9.2.0\n",
            "in": "query",
            "name": "expandCustomForms",
            "schema": {
              "enum": [
                "addresses"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets the requested record(s).\n\n\n\n**API Endpoint**:  GET /v4/records/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.get.records.ids",
        "summary": "Get Records"
      }
    },
    "/v4/records/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the record to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/simpleRecordModel1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Updates details for the specified record. \n\n\n\n**API Endpoint**:  PUT /v4/records/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.put.records.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_simpleRecordModel"
              }
            }
          },
          "description": "Record information to be updated.",
          "required": true
        },
        "summary": "Update Record"
      }
    },
    "/v4/records/{recordIds}/inspectionTypes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "Comma-delimited IDs of the records to fetch.",
            "in": "path",
            "name": "recordIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordInspectionTypeModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Inspections"
        ],
        "description": "Gets the inspection types associated with the specified record(s).\n\n\n\n**API Endpoint**:  GET /v4/records/{recordIds}/inspectionTypes \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordIds.inspectionTypes",
        "summary": "Get All Inspection Types for Record"
      }
    },
    "/v4/records/{recordId}/activities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_activityModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Activities"
        ],
        "description": "Gets all activities related to the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/activities \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.activities",
        "summary": "Get All Record Activities"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Activities"
        ],
        "description": "Creates activities associated to the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/activities \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.2\n\n",
        "operationId": "v4.post.records.recordId.activities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/request_activityAddModel"
                },
                "type": "array"
              }
            }
          },
          "description": "The activity information to be added.",
          "required": true
        },
        "summary": "Create Record Activities"
      }
    },
    "/v4/records/{recordId}/activities/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the record activity to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Activities"
        ],
        "description": "Updates the activity for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/activities/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.2\n\n",
        "operationId": "v4.put.records.recordId.activities.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_activityUpdateModel"
              }
            }
          },
          "description": "The activity information to be updated.",
          "required": true
        },
        "summary": "Update Record Activity"
      }
    },
    "/v4/records/{recordId}/additional": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of record to fetch.",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordAdditionalModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets additional information for the requested record. \n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/additional \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.get.records.recordId.additional",
        "summary": "Get Additional Details for Record"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the record to fetch.",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordAdditionalModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Updates additional information for the specified record. \n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/additional \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: \t7.3.2\n\n",
        "operationId": "v4.put.records.recordId.additional",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordAdditionalModel"
              }
            }
          },
          "description": "Additional record information for update.",
          "required": true
        },
        "summary": "Update Additional Details for Record"
      }
    },
    "/v4/records/{recordId}/addresses": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "RecordId.",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the primary address flag.",
            "in": "query",
            "name": "isPrimary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/recordAddressModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses"
        ],
        "description": "Gets the addresses linked to the specified record. \n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/addresses \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No auth required \n\n**Civic Platform version**: 7.3.3.2\n\n",
        "operationId": "v4.get.records.recordId.addresses",
        "summary": "Get All Record Addresses"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses"
        ],
        "description": "Creates new address(es) for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/addresses \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.addresses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/recordAddressModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Record address request information to be created."
        },
        "summary": "Create Record Addresses"
      }
    },
    "/v4/records/{recordId}/addresses/{addressId}/customForms": {
      "get": {
        "parameters": [
          {
            "description": "Construct oAuth2 authentication token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the record to be fetched",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the address to be fetched",
            "in": "path",
            "name": "addressId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Comma-delimited names of fields to be returned in the response. Note that field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Language parameter to support I18N. Default language is en_US",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses/Custom Forms"
        ],
        "description": "Returns an array of custom form data associated with a given record address.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/addresses/{addressId}/customForms \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.2.0\n\n",
        "operationId": "v4.get.records.recordId.addresses.addressId.customForms",
        "summary": "Get Record Address Custom Forms"
      }
    },
    "/v4/records/{recordId}/addresses/{addressId}/customForms/meta": {
      "get": {
        "parameters": [
          {
            "description": "Construct oAuth2 authentication token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of record to be fetched",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of record address to be fetched",
            "in": "path",
            "name": "addressId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Comma-delimited names of fields to be returned in the response. Note that field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored.",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Language parameter to support I18N. Default language is en_US",
            "in": "query",
            "name": "lang",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_apo_customForms_metadata"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses/Custom Forms"
        ],
        "description": "Returns the field metadata for all custom forms associated with a given record address.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/addresses/{addressId}/customForms/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.2.0\n\n",
        "operationId": "v4.get.records.recordId.addresses.addressId.customForms.meta",
        "summary": "Get Record Address Custom Forms Metadata"
      }
    },
    "/v4/records/{recordId}/addresses/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of of the addresses to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses"
        ],
        "description": "Deletes addresses from the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/addresses/{idS} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.addresses.ids",
        "summary": "Delete Record Addresses"
      }
    },
    "/v4/records/{recordId}/addresses/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the address to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/addressModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Addresses"
        ],
        "description": "Updates the address for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/addresses/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.addresses.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_recordAddressModel"
              }
            }
          },
          "description": "Address information to be updated.",
          "required": true
        },
        "summary": "Update Record Address"
      }
    },
    "/v4/records/{recordId}/assets": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_assetMasterModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Assets"
        ],
        "description": "Returns all assets for a given record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/assets \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.records.recordId.assets",
        "summary": "Get All Assets for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Assets"
        ],
        "description": "Adds one or more assets to a given record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/assets \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.assets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "An array of asset IDs to be linked to the record."
        },
        "summary": "Add Assets to Record"
      }
    },
    "/v4/records/{recordId}/assets/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the assets to be removed.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Assets"
        ],
        "description": "Deletes one or more assets from a given record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/assets/{ids} \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.records.recordId.assets.ids",
        "summary": "Delete Assets from Record"
      }
    },
    "/v4/records/{recordId}/comments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "description": "Record Id",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordCommentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Comments"
        ],
        "description": "Gets comments associated to a record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/comments \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.comments",
        "summary": "Get All Comments for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Comments"
        ],
        "description": "Add comments to a record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/comments  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.comments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/commentModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Record comments to be added."
        },
        "summary": "Add Comments to a Record"
      }
    },
    "/v4/records/{recordId}/comments/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the record comments to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Comments"
        ],
        "description": "Deletes the specified comment(s) for the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/comments/{idS} \n\n**Scope**:  \n\n\n\n**API Endpoint**:  \n\n**Scope**:  addresses \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.comments.ids",
        "summary": "Delete Record Comments"
      }
    },
    "/v4/records/{recordId}/comments/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the comment to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordCommentModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Comments"
        ],
        "description": "Update a record comment.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/comments/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.comments.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commentModel"
              }
            }
          },
          "description": "Comments to be updated."
        },
        "summary": "Update Record Comment"
      }
    },
    "/v4/records/{recordId}/conditionApprovals": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/recordConditionModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Condition Approvals"
        ],
        "description": "Gets the conditions of approval for the specified record(s).\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/conditionApprovals \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.conditionApprovals",
        "summary": "Get All Approval Conditions for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Condition Approvals"
        ],
        "description": "Adds approval conditions to the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/conditionApprovals \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.conditionApprovals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/recordConditionModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Record condition information to be added.",
          "required": true
        },
        "summary": "Create Record Approval Conditions"
      }
    },
    "/v4/records/{recordId}/conditionApprovals/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the approval conditions to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Condition Approvals"
        ],
        "description": "Deletes approval conditions for the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/conditionApprovals/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.conditionApprovals.ids",
        "summary": "Delete Record Approval Conditions"
      }
    },
    "/v4/records/{recordId}/conditionApprovals/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of record condition approval to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordConditionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Condition Approvals"
        ],
        "description": "Gets the specified condition of approvals for the specified record(s).\n\n\n\n**API Endpoint**: GET /v4/records/{recordId}/conditionApprovals/{id}  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.conditionApprovals.id",
        "summary": "Get Record Approval Condition"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the condition approval to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordConditionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Condition Approvals"
        ],
        "description": "Updates the condition of approvals for the specified record(s).\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/conditionApprovals/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.conditionApprovals.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_recordConditionModel"
              }
            }
          },
          "description": "The condition approval information to be updated.",
          "required": true
        },
        "summary": "Update Record Approval Condition"
      }
    },
    "/v4/records/{recordId}/conditions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordConditionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Gets all conditions for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/conditions \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.conditions",
        "summary": "Get All Conditions for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Adds a condition to the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/conditions \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.conditions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/recordConditionModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Condition information to be added.",
          "required": true
        },
        "summary": "Create Record Conditions"
      }
    },
    "/v4/records/{recordId}/conditions/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited ids of the conditions to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Deletes conditions for the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/conditions/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.conditions.ids",
        "summary": "Delete Record Conditions"
      }
    },
    "/v4/records/{recordId}/conditions/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of record condition to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/recordConditionModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Gets a record condition.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/conditions/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.conditions.id",
        "summary": "Get Record Condition"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of record condition to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/recordConditionModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Update a record condition.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/conditions/{id} \n\n**Scope**:  addresses \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.conditions.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordConditionModel"
              }
            }
          },
          "description": "Record condition information to be updated.",
          "required": true
        },
        "summary": "Update Record Condition"
      }
    },
    "/v4/records/{recordId}/conditions/{id}/histories": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of record condition to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/conditionHistoryModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Conditions"
        ],
        "description": "Gets the history for a given record condition.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/conditions/{id}/histories \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.records.recordId.conditions.id.histories",
        "summary": "Get History for Record Condition"
      }
    },
    "/v4/records/{recordId}/contacts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordContactSimpleModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Gets contacts associated to a record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts \n\n**Scope**:  addresses \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.contacts",
        "summary": "Get All Contacts for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Creates new contact(s) for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/contacts \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.contacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/recordContactSimpleModel"
                },
                "type": "array"
              }
            }
          },
          "description": "The contact information to be added.",
          "required": true
        },
        "summary": "Create Record Contacts"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/addresses": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_contactAddressArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Gets the addresses for the specified contacts and specified records.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.addresses",
        "summary": "Get All Addresses for Contact"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Creates addresses for the specified contact for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.contacts.contactId.addresses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/contactAddress"
                },
                "type": "array"
              }
            }
          },
          "description": "The address information to be added."
        },
        "summary": "Create Record Contact Addresses"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/addresses/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "description": "Comma-delimited IDs of the addresses to be deleted.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Deletes the specified addresses from the specified contacts and specified records.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.contacts.contactId.addresses.ids",
        "summary": "Delete Record Contact Addresses"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/addresses/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "description": "The ID of the address to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/contactAddress"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Updates the specified address for the specified contact and specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.contacts.contactId.addresses.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contactAddress"
              }
            }
          },
          "description": "The address information to be updated."
        },
        "summary": "Update Record Contact Address"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customForms": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Forms"
        ],
        "description": "Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customForms",
        "summary": "Get Record Contacts Custom Forms"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Forms"
        ],
        "description": "Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form's id and custom field name/value pairs. \n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms  \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.contacts.contactId.customForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeModel1"
                },
                "type": "array"
              }
            }
          },
          "description": "The custom form information to be updated. Example: [{ \"field1\": \"field1Val\", \"field2\": \"field2Val\", \"id\": \"Group&SubGroup\" }]",
          "required": true
        },
        "summary": "Update Record Contact Custom Forms"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customForms/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Forms"
        ],
        "description": "Gets the custom forms metadata associated with the specified record contact.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customForms.meta",
        "summary": "Get Record Contacts Custom Forms Meta"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "description": "The ID of the custom form to fetch.",
            "in": "path",
            "name": "formId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormMetadataModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Forms"
        ],
        "description": "Gets the metadata associated with the requested custom form for the record contact.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.2.0\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customForms.formId.meta",
        "summary": "Get Record Contact Custom Form Metadata"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customTables": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_tableModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Tables"
        ],
        "description": "Gets the custom tables associated with the specified record contact.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customTables",
        "summary": "Get All Custom Tables for Record Contact"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Tables"
        ],
        "description": "Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.put.records.recordId.contacts.contactId.customTables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/tableModel"
                },
                "type": "array"
              }
            }
          },
          "description": "The custom table information to be updated."
        },
        "summary": "Update Record Custom Tables"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customTables/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Tables"
        ],
        "description": "Gets the metadata of all custom tables associated with the specified record contact.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customTables.meta",
        "summary": "Get Metadata of All Record Contact Custom Tables"
      }
    },
    "/v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/contactId"
          },
          {
            "description": "The custom table ID to fetch.",
            "in": "path",
            "name": "tableId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts/Custom Tables"
        ],
        "description": "Gets the metadata of a specified custom table associated with the specified record contact.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.get.records.recordId.contacts.contactId.customTables.tableId.meta",
        "summary": "Get Metadata of a Record Contact Custom Table"
      }
    },
    "/v4/records/{recordId}/contacts/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the contacts to remove.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Removes the association of specified contacts from a specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.contacts.ids",
        "summary": "Delete Record Contacts"
      }
    },
    "/v4/records/{recordId}/contacts/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the contact to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordContactSimpleModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Contacts"
        ],
        "description": "Updates information for a specified contact associated with a specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.contacts.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordContactSimpleModel"
              }
            }
          },
          "description": "The contact information to be updated.",
          "required": true
        },
        "summary": "Update Record Contact"
      }
    },
    "/v4/records/{recordId}/costs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_costingModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Costs"
        ],
        "description": "Returns the costs associated to a given record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/costs \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.costs",
        "summary": "Get Record Costs"
      }
    },
    "/v4/records/{recordId}/costs/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of costs to be removed",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Costs"
        ],
        "description": "Deletes one or more costs from a given record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/costs/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.delete.records.recordId.costs.ids",
        "summary": "Delete Record Costs"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "description": "The ID of the record to update.",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the cost to update.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_costingModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Costs"
        ],
        "description": "Update the details of the costs for given records.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/costs/{id} \n\n**Scope**:  costs \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 20.1.4\n\n",
        "operationId": "v4.put.records.recordId.costs.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/request_costingModelArray"
                },
                "type": "array"
              }
            }
          },
          "description": "The cost information to be updated.",
          "required": true
        },
        "summary": "Update Record Costs"
      }
    },
    "/v4/records/{recordId}/customForms": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Forms"
        ],
        "description": "Returns an array of custom forms associated with the specified record. Each custom form consists of custom field name-and-value pairs.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customForms \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customForms",
        "summary": "Get All Custom Forms for Record"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Forms"
        ],
        "description": "Updates the custom form for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/customForms  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.customForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeModel1"
                },
                "type": "array"
              }
            }
          },
          "description": "Custom form informatio to be updated. Example: [{ \"field1\": \"field1Val\", \"field2\": \"field2Val\", \"_Id_\": \"Group&SubGroup\" }]",
          "required": true
        },
        "summary": "Update Record Custom Forms"
      }
    },
    "/v4/records/{recordId}/customForms/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Forms"
        ],
        "description": "Gets the detailed data associated with the custom forms for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customForms/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customForms.meta",
        "summary": "Get All Custom Forms Metadata for Record"
      }
    },
    "/v4/records/{recordId}/customForms/{formId}/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the custom form to fetch.).",
            "in": "path",
            "name": "formId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Forms"
        ],
        "description": "Gets the detailed data associated with the specified custom form for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customForms/{formId}/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customForms.formId.meta",
        "summary": "Get Custom Form Metadata for Record"
      }
    },
    "/v4/records/{recordId}/customTables": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_tableModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Tables"
        ],
        "description": "Gets all the custom tables associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customTables \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customTables",
        "summary": "Get All Custom Tables for Record"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Tables"
        ],
        "description": "Updates the custom table for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/customTables  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.customTables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/tableModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Custom table data to be updated.",
          "required": true
        },
        "summary": "Update Record Custom Tables"
      }
    },
    "/v4/records/{recordId}/customTables/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Tables"
        ],
        "description": "Gets detailed data associated with the custom tables for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customTables/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customTables.meta",
        "summary": "Get All Custom Tables Metadata for Record"
      }
    },
    "/v4/records/{recordId}/customTables/{tableId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the custom table to fetch.",
            "in": "path",
            "name": "tableId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_tableModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Tables"
        ],
        "description": "Gets the requested custom table for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customTables.tableId",
        "summary": "Get Record Custom Table"
      }
    },
    "/v4/records/{recordId}/customTables/{tableId}/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the custom table to fetch.",
            "in": "path",
            "name": "tableId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Custom Tables"
        ],
        "description": "Gets the detailed data associated with the specified custom table for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  No authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.customTables.tableId.meta",
        "summary": "Get Custom Table Metadata for Record"
      }
    },
    "/v4/records/{recordId}/documentCategories": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_documentTypeModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Documents"
        ],
        "description": "Gets the document types associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/documentCategories \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.documentCategories",
        "summary": "Get All Document Categories for Record"
      }
    },
    "/v4/records/{recordId}/documents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_documentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Documents"
        ],
        "description": "Gets the documents associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/documents \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.documents",
        "summary": "Get All Documents for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The document group",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document category",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EDMS Adapter User ID. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EMDS Adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Documents"
        ],
        "description": "Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \"Content-Type:multipart/form-data\" and form-data for \"uploadedFile\" and \"fileInfo\". Note that the \"fileInfo\" is a string containing an array of file attributes. Use \"fileInfo\" to specify one or more documents to be attached. See the example for details.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/documents  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.documents",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileInfo": {
                    "description": "A string array containing the file metadata for each specified filename. See example for details.",
                    "type": "string"
                  }
                },
                "required": [
                  "fileInfo"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create Record Documents"
      }
    },
    "/v4/records/{recordId}/documents/{documentIds}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the documents to be deleted.",
            "in": "path",
            "name": "documentIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EDMS Adapter User ID. It's required for user level authentication",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The EMDS Adapter password. It's required for user level authentication",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Documents"
        ],
        "description": "Deletes documents attached to a record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.documents.documentIds",
        "summary": "Delete Record Documents"
      }
    },
    "/v4/records/{recordId}/fees": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "description": "Filter by the status of the fee items.",
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "paid",
                "unpaid"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_feeItemModel_1Array"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Fees"
        ],
        "description": "Gets the fee schedules associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/fees \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.fees",
        "summary": "Get All Fees for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Fees"
        ],
        "description": "Creates fees for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/fees \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.fees",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/feeItemBaseModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Fee item information to be added. eg: [{ \"code\" : {\"value\":\"TESTFEE2\"}, \"feeNotes\":\"test note1\", \"paymentPeriod\" : {\"value\":\"FINAL\"}, \"quantity\" : 9, \"schedule\" : {\"value\":\"J_FEE\"}, \"version\" : {\"value\":\"1.0\"}}, { \"code\" : {\"value\":\"JFEE\"},\"feeNotes\":\"test note1\",\"paymentPeriod\" :{\"value\": \"FINAL\"}, \"quantity\" : 9, \"schedule\" : {\"value\":\"AD_LETTER\"}, \"version\" : {\"value\":\"1\"}} ]",
          "required": true
        },
        "summary": "Create Record Fees"
      }
    },
    "/v4/records/{recordId}/fees/estimate": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_estimateFeeModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Fees"
        ],
        "description": "Provides fee estimations for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/fees/estimate \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3\n\n",
        "operationId": "v4.put.records.recordId.fees.estimate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/feeItemBaseModel_1"
                },
                "type": "array"
              }
            }
          },
          "description": "The record fee items information to be updated.",
          "required": true
        },
        "summary": "Estimate Record Fees"
      }
    },
    "/v4/records/{recordId}/finalize": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_simpleRecordModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record. \n\n The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter. \n\n Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/finalize \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.finalize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_recordModel"
              }
            }
          },
          "description": "Create Record request information.",
          "required": true
        },
        "summary": "Finalize Record"
      }
    },
    "/v4/records/{recordId}/inspections": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_inspectionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Inspections"
        ],
        "description": "Gets the scheduled inspections for the specified record. \n\n Note: For a citizen token, the Display in ACA setting of the given {recordId} determines whether or not an inspection is returned. If Display in ACA is enabled for the given {recordId}, the inspection is included in the response; otherwise, the inspection will not be included. For an agency token, the Display in ACA setting of the given {recordId} is ignored.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/inspections  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.inspections",
        "summary": "Get All Inspections for Record"
      }
    },
    "/v4/records/{recordId}/invoices": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "description": "RecordId",
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_invoiceModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Invoices"
        ],
        "description": "Returns all invoices for a given record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/invoices \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.records.recordId.invoices",
        "summary": "Get All Record Invoices"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Invoices"
        ],
        "description": "Adds or links invoices to a given record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/invoices \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.2\n\n",
        "operationId": "v4.post.records.recordId.invoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              }
            }
          },
          "description": "An array of invoice fee IDs to be added to the record. eg: [7295255, 7295256]",
          "required": true
        },
        "summary": "Create Record Invoices"
      }
    },
    "/v4/records/{recordId}/owners": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_refOwnerModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Owners"
        ],
        "description": "Gets owners associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/owners  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.owners",
        "summary": "Get All Owners for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Owners"
        ],
        "description": "Creates a new owner association for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/owners \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.owners",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/refOwnerModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Create Inspection Owners request information.",
          "required": true
        },
        "summary": "Create Record Owners"
      }
    },
    "/v4/records/{recordId}/owners/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delmited IDs of the owners to be removed from the record.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Owners"
        ],
        "description": "Removes the specified owner(s) from the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/owners/{ids}  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.owners.ids",
        "summary": "Delete Record Owners"
      }
    },
    "/v4/records/{recordId}/owners/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of Owner to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_refOwnerModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Owners"
        ],
        "description": "Updates information about the specified owner for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/owners/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.owners.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refOwnerModel"
              }
            }
          },
          "description": "Update Inspection Owner request information.",
          "required": true
        },
        "summary": "Update Record Owner"
      }
    },
    "/v4/records/{recordId}/parcels": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordParcelModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Parcels"
        ],
        "description": "Gets the parcels associated with the specified parcel.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/parcels \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.parcels",
        "summary": "Get All Parcels for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Parcels"
        ],
        "description": "Creates a new parcel for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/parcels \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  \tNo authorization required \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.parcels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/recordParcelModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Record parcel information to be added.",
          "required": true
        },
        "summary": "Create Record Parcels"
      }
    },
    "/v4/records/{recordId}/parcels/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the parcels to be removed.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Parcels"
        ],
        "description": "Removes the association of the specified parcel(s) from the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/parcels/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.parcels.ids",
        "summary": "Delete Record Parcels"
      }
    },
    "/v4/records/{recordId}/parcels/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the record parcel to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordParcelModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Parcels"
        ],
        "description": "Updates parcel information associated with the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/parcels/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.parcels.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordParcelModel"
              }
            }
          },
          "description": "Record parcel information to be updated.",
          "required": true
        },
        "summary": "Update Record Parcel"
      }
    },
    "/v4/records/{recordId}/partTransaction": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_partTransactionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Part Transactions"
        ],
        "description": "Gets information about the part transaction associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/partTransaction \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3\n\n",
        "operationId": "v4.get.records.recordId.partTransaction",
        "summary": "Get Record Part Transaction"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Part Transactions"
        ],
        "description": "Creates a part transaction for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/partTransaction \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3\n\n",
        "operationId": "v4.post.records.recordId.partTransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/partTransactionModel"
                },
                "type": "array"
              }
            }
          },
          "description": "Part transaction information to be added.",
          "required": true
        },
        "summary": "Create Record Part Transaction"
      }
    },
    "/v4/records/{recordId}/partTransaction/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the part transactions to be removed.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Part Transactions"
        ],
        "description": "Voids one or more part transactions for the specified record. The part transaction is voided, not deleted.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/partTransaction/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3\n\n",
        "operationId": "v4.delete.records.recordId.partTransaction.ids",
        "summary": "Void Record Part Transactions"
      }
    },
    "/v4/records/{recordId}/payments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Filter by whether or not a payment has been made in full.",
            "in": "query",
            "name": "paymentStatus",
            "schema": {
              "enum": [
                "Y",
                "N"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_paymentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Payments"
        ],
        "description": "Gets information about the payments for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/payments \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 9.0.0\n\n",
        "operationId": "v4.get.records.recordId.payments",
        "summary": "Get All Payments for Record"
      }
    },
    "/v4/records/{recordId}/payments/{paymentId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the payment to fetch.",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_paymentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Payments"
        ],
        "description": "Gets information about the specified payment for the specified record.\n\n\n\n**API Endpoint**: GET /v4/records/{recordId}/payments/{paymentId}  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.payments.paymentId",
        "summary": "Get Record Payment"
      }
    },
    "/v4/records/{recordId}/professionals": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_licenseProfessionalModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Professionals"
        ],
        "description": "Gets the professionals for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/professionals \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.professionals",
        "summary": "Get All Professionals for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Professionals"
        ],
        "description": "Creates a new professional and associates the professional with the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/professionals \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.professionals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/licenseProfessionalModel"
                },
                "type": "array"
              }
            }
          },
          "description": "The licensed professional information to be added.",
          "required": true
        },
        "summary": "Create Record Professionals"
      }
    },
    "/v4/records/{recordId}/professionals/{ids}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the licensed professionals to be removed.",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Professionals"
        ],
        "description": "Removes the association between the specified professional(s) and the specified record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/professionals/{ids} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.professionals.ids",
        "summary": "Delete Record Professionals"
      }
    },
    "/v4/records/{recordId}/professionals/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of professional to update.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_licenseProfessionalModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Professionals"
        ],
        "description": "Updates information for the specified professional associated with the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/professionals/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.professionals.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/licenseProfessionalModel"
              }
            }
          },
          "description": "The licensed professional information to be updated.",
          "required": true
        },
        "summary": "Update Record Professional"
      }
    },
    "/v4/records/{recordId}/related": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Filter by record relationship.",
            "in": "query",
            "name": "relationship",
            "required": false,
            "schema": {
              "enum": [
                "parent",
                "child",
                "renewal"
              ],
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_recordRelatedModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Gets the records related, by a parent or child relation, to the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/related \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.related",
        "summary": "Get All Related Details for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Creates a child relationship to the specified (parent) record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/related  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.related",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Related record information to be added.",
          "required": true
        },
        "summary": "Create Related Details for Record"
      }
    },
    "/v4/records/{recordId}/related/{childRecordIds}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "Comma-delimited IDs of the related records to be removed.",
            "in": "path",
            "name": "childRecordIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records"
        ],
        "description": "Removes the relationship between the specifed child record(s) and their specified parent record.\n\n\n\n**API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds} \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.delete.records.recordId.related.childRecordIds",
        "summary": "Delete Related Details from Record"
      }
    },
    "/v4/records/{recordId}/trustAccounts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_trustAccountModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Trust Accounts"
        ],
        "description": "Gets all trust accounts for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/trustAccounts \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.3.4\n\n",
        "operationId": "v4.get.records.recordId.trustAccounts",
        "summary": "Get All Trust Accounts for Record"
      }
    },
    "/v4/records/{recordId}/votes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_voteResult"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Votes"
        ],
        "description": "Gets the votes for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/votes \n\n**Scope**:  records \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.votes",
        "summary": "Get All Votes for Record"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_voteResult"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Votes"
        ],
        "description": "Creates a vote for the specified record.\n\n\n\n**API Endpoint**:  POST /v4/records/{recordId}/votes \n\n**Scope**:  records \n\n**App Type**:  Citizen \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.post.records.recordId.votes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/voteRequest"
              }
            }
          },
          "description": "The vote request to add.",
          "required": true
        },
        "summary": "Create Record Votes"
      }
    },
    "/v4/records/{recordId}/votes/summary": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_voteSummary"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Votes"
        ],
        "description": "Gets the voting summary for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/votes/summary \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.votes.summary",
        "summary": "Get Record Votes Summary"
      }
    },
    "/v4/records/{recordId}/workflowTasks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_taskItemModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Gets all the workflow tasks associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks",
        "summary": "Get All Workflow Tasks for Record"
      }
    },
    "/v4/records/{recordId}/workflowTasks/comments/histories": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_workflowTaskCommentModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Gets the workflow task comment history for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.comments.histories",
        "summary": "Get Workflow Task Comment Histories"
      }
    },
    "/v4/records/{recordId}/workflowTasks/histories": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_taskItemActionModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Gets all the workflow task history associated with the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.histories",
        "summary": "Get All Workflow Task History for Record"
      }
    },
    "/v4/records/{recordId}/workflowTasks/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of task to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_taskItemModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Gets the requested workflow task for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id} \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.id",
        "summary": "Get Record Workflow Task"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of task to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_taskItemModel"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Updates the requested workflow task for the specified record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id} \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.put.records.recordId.workflowTasks.id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request_taskItemModel"
              }
            }
          },
          "description": "The task information to be updated",
          "required": true
        },
        "summary": "Update Record Workflow Task"
      }
    },
    "/v4/records/{recordId}/workflowTasks/{id}/statuses": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of task to fetch.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_identifierModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Gets the status of the specified workflow task for the specified record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.id.statuses",
        "summary": "Get All Statuses for Workflow Task"
      }
    },
    "/v4/records/{recordId}/workflowTasks/{taskId}/customForms": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the workflow task to fetch.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customAttributeModelArray1"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Returns the custom forms containing task-specific information for a given workflow task for a specific record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms  \n\n**Scope**:  records \n\n**App Type**:  All \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.taskId.customForms",
        "summary": "Get All Custom Forms for Record Workflow Task"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the workflow task to fetch.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_resultModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Updates custom forms containing task-specific information for a given workflow task for a specific record.\n\n\n\n**API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms  \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 8.0.3\n\n",
        "operationId": "v4.put.records.recordId.workflowTasks.taskId.customForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeModel1"
                },
                "type": "array"
              }
            }
          },
          "description": "The custom form information to be updated. Ex. [{\"apiField1\": \"val1\", \"id\": \"group-subGroup\"   }]",
          "required": true
        },
        "summary": "Update Custom Form for Record Workflow Task"
      }
    },
    "/v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/authHeaderParam"
          },
          {
            "$ref": "#/components/parameters/recordId"
          },
          {
            "description": "The ID of the workflow task to fetch.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/response_customFormSubgroupModelArray"
                }
              }
            },
            "description": "Successful request. Note: A successful request may return no data matching the filter criteria. A successful request may also return messages related to Event Manager Scripting Engine back-end processing."
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Authorization failed."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Requested resource not found."
          },
          "500": {
            "description": "Internal server error or bad connection."
          }
        },
        "tags": [
          "Records/Workflows"
        ],
        "description": "Returns the metadata associated with all custom forms for a given workflow task for a specific record.\n\n\n\n**API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta  \n\n**Scope**:  records \n\n**App Type**:  Agency \n\n**Authorization Type**:  Access token \n\n**Civic Platform version**: 7.3.2\n\n",
        "operationId": "v4.get.records.recordId.workflowTasks.taskId.customForms.meta",
        "summary": "Get All Custom Forms Metadata for Record Workflow Task"
      }
    }
  },
  "components": {
    "schemas": {
      "capIDModel_v4_get_citizenaccess_citizens_id_trustAccounts": {
        "properties": {
          "customId": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "trackingId": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "citizenContactModel": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ownerAddressModel"
          },
          "birthCity": {
            "description": "The city of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "The citizen's birth date",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "The country of birth or region of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "The state of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "The business name for the applicable individual.",
            "type": "string"
          },
          "businessName2": {
            "description": "A secondary business name.",
            "type": "string"
          },
          "comment": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "contactAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel"
            },
            "type": "array"
          },
          "deceasedDate": {
            "description": "The deceased date, if applicable.",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "The state that issued the driver's license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "Fax Number Country Code",
            "type": "string"
          },
          "faxNumber": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The contact system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.",
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "middleName": {
            "description": "The middle name.",
            "type": "string"
          },
          "namesuffix": {
            "description": "The suffix that follows the user's name",
            "type": "string"
          },
          "passportNumber": {
            "description": "The contact's passport number.",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "Phone Number 1 Country Code",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "Phone Number 2 Country Code",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "Phone Number 3 Country Code",
            "type": "string"
          },
          "phoneNumber1": {
            "description": "The user's first phone number.",
            "type": "string"
          },
          "phoneNumber2": {
            "description": "The user's second phone number.",
            "type": "string"
          },
          "phoneNumber3": {
            "description": "The user's third phone number.",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "preferredChannel": {
            "description": "The method by which the contact prefers to be notified, by phone for example.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "The contact's race/ethnicity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "The contact's relationship to the application or service request.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. or Ms. ",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "socialSecurityNumber": {
            "description": "The individual's social security number.",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "The contact's state ID number.",
            "type": "string"
          },
          "status": {
            "description": "The contact status.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title",
            "type": "string"
          },
          "tradeName": {
            "description": "The contact's preferred business or trade name. ",
            "type": "string"
          },
          "type": {
            "description": "The type of contact.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "typeFlag": {
            "description": "Indicates whether the contact is an individual or organization.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "citizenProfileModel": {
        "properties": {
          "email": {
            "description": "The citizen user's email address.",
            "type": "string"
          },
          "id": {
            "description": "The user id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "loginName": {
            "description": "The citizen user's login name.",
            "type": "string"
          },
          "mobilePhone": {
            "description": "The citizen user's 10-digit cell phone number.",
            "type": "string"
          },
          "receiveSMS": {
            "description": "Indicates whether or not the user prefers to receive SMS messages.",
            "type": "string"
          },
          "registerDate": {
            "description": "The citizen user's registration date.",
            "format": "date-time",
            "type": "string"
          },
          "role": {
            "description": "The citizen user's role",
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "compactAddressModel_request_v4_post_citizenaccess_register": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "compactAddressModel_response_v4_post_citizenaccess_register": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "compactAddressModel_v4_get_citizenaccess_citizens": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "compactAddressModel_v4_get_civicid_citizenaccess_contacts": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "zip": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "compactAddressModel_v4_post_citizenaccess_citizens": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "zip": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "contactAddressModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "direction": {
            "description": "The street direction of the primary address associated with the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "houseAlphaEnd": {
            "description": "The ending alphabetic unit in street address.",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "The beginning alphabetic unit in street address.",
            "type": "string"
          },
          "id": {
            "description": "The unique address id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.",
            "type": "string"
          },
          "levelEnd": {
            "description": "The ending level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "levelPrefix": {
            "description": "The prefix for the level numbers (floor numbers) that make up the address.",
            "type": "string"
          },
          "levelStart": {
            "description": "The starting level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "The name of the state.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The address status indicating whether the address is active or inactive.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "streetEnd": {
            "description": "The ending number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetName": {
            "description": "The name of the street.",
            "type": "string"
          },
          "streetPrefix": {
            "description": "Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \"West\" is the street prefix.",
            "type": "string"
          },
          "streetStart": {
            "description": "The starting number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetSuffix": {
            "description": "The type of street such as \"Lane\" or \"Boulevard\".",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, \"NW\" is the street suffix direction.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "The ending value of a range of unit numbers.",
            "type": "string"
          },
          "unitStart": {
            "description": "The starting value of a range of unit numbers.",
            "type": "string"
          },
          "unitType": {
            "description": "The unit type designation of the address.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "contactAddressModel_request_v4_post_citizenaccess_register": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "direction": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "houseAlphaEnd": {
            "description": "",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "",
            "type": "string"
          },
          "levelEnd": {
            "description": "",
            "type": "string"
          },
          "levelPrefix": {
            "description": "",
            "type": "string"
          },
          "levelStart": {
            "description": "",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "",
            "type": "string"
          },
          "streetEnd": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "description": "",
            "type": "string"
          },
          "streetPrefix": {
            "description": "",
            "type": "string"
          },
          "streetStart": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "",
            "type": "string"
          },
          "unitStart": {
            "description": "",
            "type": "string"
          },
          "unitType": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "contactAddressModel_response_v4_post_citizenaccess_register": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "direction": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "houseAlphaEnd": {
            "description": "",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "",
            "type": "string"
          },
          "levelEnd": {
            "description": "",
            "type": "string"
          },
          "levelPrefix": {
            "description": "",
            "type": "string"
          },
          "levelStart": {
            "description": "",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "",
            "type": "string"
          },
          "streetEnd": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "description": "",
            "type": "string"
          },
          "streetPrefix": {
            "description": "",
            "type": "string"
          },
          "streetStart": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "",
            "type": "string"
          },
          "unitStart": {
            "description": "",
            "type": "string"
          },
          "unitType": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "contactAddressModel_v4_get_citizenaccess_citizens": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "direction": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "houseAlphaEnd": {
            "description": "",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "",
            "type": "string"
          },
          "levelEnd": {
            "description": "",
            "type": "string"
          },
          "levelPrefix": {
            "description": "",
            "type": "string"
          },
          "levelStart": {
            "description": "",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "",
            "type": "string"
          },
          "streetEnd": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "description": "",
            "type": "string"
          },
          "streetPrefix": {
            "description": "",
            "type": "string"
          },
          "streetStart": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "",
            "type": "string"
          },
          "unitStart": {
            "description": "",
            "type": "string"
          },
          "unitType": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "contactAddressModel_v4_get_civicid_citizenaccess_contacts": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "entityID": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "fullAddress": {
            "description": "",
            "type": "string"
          },
          "houseNumberAlphaEnd": {
            "description": "",
            "type": "string"
          },
          "houseNumberAlphaStart": {
            "description": "",
            "type": "string"
          },
          "houseNumberEnd": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "houseNumberStart": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "levelNumberEnd": {
            "description": "",
            "type": "string"
          },
          "levelNumberStart": {
            "description": "",
            "type": "string"
          },
          "levelPrefix": {
            "description": "",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "primary": {
            "description": "",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "",
            "type": "string"
          },
          "streetDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetName": {
            "description": "",
            "type": "string"
          },
          "streetPrefix": {
            "description": "",
            "type": "string"
          },
          "streetSuffix": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "",
            "type": "string"
          },
          "unitStart": {
            "description": "",
            "type": "string"
          },
          "unitType": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "validateFlag": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "contactAddressModel_v4_post_citizenaccess_citizens": {
        "properties": {
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "addressLine3": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "effectiveDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "entityID": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "expirationDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "fullAddress": {
            "description": "",
            "type": "string"
          },
          "houseNumberAlphaEnd": {
            "description": "",
            "type": "string"
          },
          "houseNumberAlphaStart": {
            "description": "",
            "type": "string"
          },
          "houseNumberEnd": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "houseNumberStart": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "levelNumberEnd": {
            "description": "",
            "type": "string"
          },
          "levelNumberStart": {
            "description": "",
            "type": "string"
          },
          "levelPrefix": {
            "description": "",
            "type": "string"
          },
          "phone": {
            "description": "",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "",
            "type": "string"
          },
          "postalCode": {
            "description": "",
            "type": "string"
          },
          "primary": {
            "description": "",
            "type": "string"
          },
          "recipient": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "",
            "type": "string"
          },
          "streetDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetName": {
            "description": "",
            "type": "string"
          },
          "streetPrefix": {
            "description": "",
            "type": "string"
          },
          "streetSuffix": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "",
            "type": "string"
          },
          "unitStart": {
            "description": "",
            "type": "string"
          },
          "unitType": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "validateFlag": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "contractorPeopleModel_v4_get_citizenaccess_citizens": {
        "properties": {
          "additionalAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel_v4_get_citizenaccess_citizens"
            },
            "type": "array"
          },
          "address": {
            "$ref": "#/components/schemas/compactAddressModel_v4_get_citizenaccess_citizens"
          },
          "birthCity": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "",
            "type": "string"
          },
          "comment": {
            "description": "",
            "type": "string"
          },
          "deceasedDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "",
            "type": "string"
          },
          "firstName": {
            "description": "",
            "type": "string"
          },
          "fullName": {
            "description": "",
            "type": "string"
          },
          "gender": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "middleName": {
            "description": "",
            "type": "string"
          },
          "organizationName": {
            "description": "",
            "type": "string"
          },
          "passportNumber": {
            "description": "",
            "type": "string"
          },
          "phone1": {
            "description": "",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone2": {
            "description": "",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone3": {
            "description": "",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "",
            "type": "string"
          },
          "preferredChannel": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "",
            "type": "string"
          },
          "tradeName": {
            "description": "",
            "type": "string"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "delegatePrivilegeModel": {
        "properties": {
          "firstName": {
            "description": "The citizen user's first name.",
            "type": "string"
          },
          "id": {
            "description": "Ther citizen delegate's userid.",
            "type": "string"
          },
          "lastName": {
            "description": "The citizen user's last name.",
            "type": "string"
          },
          "permissions": {
            "description": "An array containing the allowed actions assigned to the user, per module.",
            "items": {
              "$ref": "#/components/schemas/permissionModel"
            },
            "type": "array"
          },
          "userName": {
            "description": "The user who assigned the permission.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "identifierModel": {
        "properties": {
          "text": {
            "description": "",
            "type": "string"
          },
          "value": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "messageModel": {
        "properties": {
          "id": {
            "description": "The message id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "isRead": {
            "description": "Indicates whether or not an announcement has been read by the logged-in user.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "startEffectDate": {
            "description": "The starting effective date.",
            "format": "date-time",
            "type": "string"
          },
          "text": {
            "description": "The announcement text.",
            "type": "string"
          },
          "title": {
            "description": "The announcement title.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "multipleObjectResultModel_v4_post_citizenaccess_citizens": {
        "properties": {
          "code": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "multipleObjectResultModel_v4_post_citizenaccess_citizens_delegates": {
        "properties": {
          "code": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "multipleObjectResultModel_v4_put_announcements_ids_read": {
        "properties": {
          "code": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "multipleObjectResultModel_v4_put_citizenaccess_citizens_id_accounts": {
        "properties": {
          "code": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ownerAddressModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "state": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "peopleModel": {
        "properties": {
          "additionalAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel"
            },
            "type": "array"
          },
          "address": {
            "$ref": "#/components/schemas/ownerAddressModel"
          },
          "birthCity": {
            "description": "The city of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDateFrom": {
            "description": "The start of a birth date range to search.",
            "format": "date-time",
            "type": "string"
          },
          "birthDateTo": {
            "description": "The end of a birth date range to search.",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "The country of birth or region of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "The state of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "A secondary business name for the applicable individual.",
            "type": "string"
          },
          "deceasedDate": {
            "description": "The deceased date, if applicable.",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "The state that issued the driver's license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "Fax Number Country Code",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The contact system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "middleName": {
            "description": "The middle name.",
            "type": "string"
          },
          "openCloseMatch": {
            "description": "Indicates whether or not to use close matches as hits in a search for contacts.",
            "type": "string"
          },
          "openSoundexSearch": {
            "description": "Indicates whether or not Soundex search is enabled for any of the following requested parameters: firstName, middleName, lastName, organizationName, tradeName, businessName, streetName",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "orderBy": {
            "description": "The fields by which the search results are ordered. For each field, specify the sort order: asc for ascending or desc for descending order. Use commas to separate multiple sort fields. The values are not case-sensitive. For example: \"orderBy\":\"lastName desc,email asc\"",
            "enum": [
              "LastName",
              "LastName ASC",
              "LastName DESC",
              "FirstName",
              "FirstName ASC",
              "FirstName DESC",
              "birthDate",
              "birthDate ASC",
              "birthDate DESC",
              "AddressCity",
              "AddressCity ASC",
              "AddressCity DESC",
              "AddressState",
              "AddressState ASC",
              "AddressState DESC",
              "AddressZIP",
              "AddressZIP ASC",
              "AddressZIP DESC",
              "AddressCountry",
              "AddressCountry ASC",
              "AddressCountry DESC",
              "email",
              "email ASC",
              "email DESC",
              "PHONE1",
              "PHONE1 ASC",
              "PHONE1 DESC",
              "PHONE2",
              "PHONE2 ASC",
              "PHONE2 DESC"
            ],
            "type": "string"
          },
          "organizationName": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "passportNumber": {
            "description": "The contact's passport number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "phone1": {
            "description": "The primary telephone number of the contact.",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "Phone Number 1 Country Code",
            "type": "string"
          },
          "phone2": {
            "description": "The secondary telephone number of the contact.",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "Phone Number 2 Country Code",
            "type": "string"
          },
          "phone3": {
            "description": "The tertiary telephone number for the contact.",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "Phone Number 3 Country Code",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "preferredChannel": {
            "description": "The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "The contact's relationship to the application or service request.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "The individual's social security number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "The contact's state ID number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "status": {
            "description": "The contact status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "The contact name suffix.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title.",
            "type": "string"
          },
          "tradeName": {
            "description": "The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.",
            "type": "string"
          },
          "type": {
            "description": "The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "peopleModel_request_v4_post_citizenaccess_register": {
        "properties": {
          "additionalAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel_request_v4_post_citizenaccess_register"
            },
            "type": "array"
          },
          "address": {
            "$ref": "#/components/schemas/compactAddressModel_request_v4_post_citizenaccess_register"
          },
          "birthCity": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "",
            "type": "string"
          },
          "comment": {
            "description": "",
            "type": "string"
          },
          "deceasedDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "",
            "type": "string"
          },
          "firstName": {
            "description": "",
            "type": "string"
          },
          "fullName": {
            "description": "",
            "type": "string"
          },
          "gender": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "middleName": {
            "description": "",
            "type": "string"
          },
          "organizationName": {
            "description": "",
            "type": "string"
          },
          "passportNumber": {
            "description": "",
            "type": "string"
          },
          "phone1": {
            "description": "",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone2": {
            "description": "",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone3": {
            "description": "",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "",
            "type": "string"
          },
          "preferredChannel": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "",
            "type": "string"
          },
          "tradeName": {
            "description": "",
            "type": "string"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "peopleModel_response_v4_post_citizenaccess_register": {
        "properties": {
          "additionalAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel_response_v4_post_citizenaccess_register"
            },
            "type": "array"
          },
          "address": {
            "$ref": "#/components/schemas/compactAddressModel_response_v4_post_citizenaccess_register"
          },
          "birthCity": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "",
            "type": "string"
          },
          "comment": {
            "description": "",
            "type": "string"
          },
          "deceasedDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "",
            "type": "string"
          },
          "firstName": {
            "description": "",
            "type": "string"
          },
          "fullName": {
            "description": "",
            "type": "string"
          },
          "gender": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "middleName": {
            "description": "",
            "type": "string"
          },
          "organizationName": {
            "description": "",
            "type": "string"
          },
          "passportNumber": {
            "description": "",
            "type": "string"
          },
          "phone1": {
            "description": "",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone2": {
            "description": "",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone3": {
            "description": "",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "",
            "type": "string"
          },
          "preferredChannel": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "",
            "type": "string"
          },
          "tradeName": {
            "description": "",
            "type": "string"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "peopleModel_v4_post_citizenaccess_citizens": {
        "properties": {
          "additionalAddresses": {
            "items": {
              "$ref": "#/components/schemas/contactAddressModel_v4_post_citizenaccess_citizens"
            },
            "type": "array"
          },
          "address": {
            "$ref": "#/components/schemas/compactAddressModel_v4_post_citizenaccess_citizens"
          },
          "birthCity": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "",
            "type": "string"
          },
          "comment": {
            "description": "",
            "type": "string"
          },
          "deceasedDate": {
            "description": "",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "fax": {
            "description": "",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "",
            "type": "string"
          },
          "firstName": {
            "description": "",
            "type": "string"
          },
          "fullName": {
            "description": "",
            "type": "string"
          },
          "gender": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "middleName": {
            "description": "",
            "type": "string"
          },
          "organizationName": {
            "description": "",
            "type": "string"
          },
          "passportNumber": {
            "description": "",
            "type": "string"
          },
          "phone1": {
            "description": "",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone2": {
            "description": "",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "",
            "type": "string"
          },
          "phone3": {
            "description": "",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "",
            "type": "string"
          },
          "preferredChannel": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "",
            "type": "string"
          },
          "title": {
            "description": "",
            "type": "string"
          },
          "tradeName": {
            "description": "",
            "type": "string"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "permissionLevelModel": {
        "properties": {
          "AGENCY": {
            "description": "The agency the delegate has access to, for a multi-agency environment.",
            "type": "string"
          },
          "MODULE": {
            "description": "The Civic Platform module the delegate has access to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "permissionModel": {
        "properties": {
          "allowedActions": {
            "description": "An action the user is allowed to perform",
            "enum": [
              "ViewRecords",
              "CreateRecords",
              "RenewRecords",
              "ManageInsps",
              "ManageDocs",
              "MakePayments",
              "AmendRecords"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "level": {
            "$ref": "#/components/schemas/permissionLevelModel"
          }
        },
        "type": "object"
      },
      "publicUserDelegateModel": {
        "properties": {
          "delegateStatus": {
            "description": "The status of the delegate request.",
            "enum": [
              "PENDING",
              "ACCEPT",
              "REJECT",
              "EXPIRED"
            ],
            "type": "string"
          },
          "id": {
            "description": "The delegate id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "invitationMessage": {
            "description": "The invitation message sent to the delegate.",
            "type": "string"
          },
          "name": {
            "description": "The delegate's name.",
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/publicUserDelegatePermissionModel"
            },
            "type": "array"
          },
          "userName": {
            "description": "The delegate's login name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserDelegatePermissionModel": {
        "properties": {
          "amendAllowed": {
            "description": "If true, the delegate is allowed to amend records.",
            "type": "boolean"
          },
          "createRecordAllowed": {
            "description": "If true, the delegate is allowed to create records.",
            "type": "boolean"
          },
          "documentAllowed": {
            "description": "If true, the delegate is allowed to manage documents.",
            "type": "boolean"
          },
          "inspectionAllowed": {
            "description": "If true, the delegate is allowed to manage inspections.",
            "type": "boolean"
          },
          "level": {
            "description": "The permission level.",
            "type": "string"
          },
          "levelValue": {
            "description": "The value for the permission level, as configured in Civic Platform Administration.",
            "type": "string"
          },
          "paymentAllowed": {
            "description": "If true, the delegate is allowed to make payments.",
            "type": "boolean"
          },
          "renewalAllowed": {
            "description": "If true, the delegate is allowed to renew records.",
            "type": "boolean"
          },
          "viewRecordAllowed": {
            "description": "If true, the delegate is allowed to view records.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "publicUserDelegatePermissionModel_v4_get_citizenaccess_citizens_invitations": {
        "properties": {
          "amendAllowed": {
            "type": "boolean"
          },
          "createRecordAllowed": {
            "type": "boolean"
          },
          "documentAllowed": {
            "type": "boolean"
          },
          "inspectionAllowed": {
            "type": "boolean"
          },
          "level": {
            "description": "",
            "type": "string"
          },
          "levelValue": {
            "description": "",
            "type": "string"
          },
          "paymentAllowed": {
            "type": "boolean"
          },
          "renewalAllowed": {
            "type": "boolean"
          },
          "viewRecordAllowed": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "publicUserDelegateStatusModel": {
        "properties": {
          "delegateStatus": {
            "description": "The status of the delegate request.",
            "enum": [
              "ACCEPT",
              "REJECT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserModel": {
        "properties": {
          "active": {
            "description": "Indicates whether or not the user is active.",
            "enum": [
              "Yes",
              "No"
            ],
            "type": "string"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/peopleModel"
            },
            "type": "array"
          },
          "email": {
            "description": "The citizen user's email address.",
            "type": "string"
          },
          "id": {
            "description": "The citizen id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "loginName": {
            "description": "The citizen user's login name.",
            "type": "string"
          },
          "mobilePhone": {
            "description": "The citizen user's 10-digit cell phone number.",
            "type": "string"
          },
          "receiveSMS": {
            "description": "Indicates whether or not the user prefers to receive SMS messages.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "registerDate": {
            "description": "The citizen user's registration date.",
            "format": "date-time",
            "type": "string"
          },
          "role": {
            "description": "The citizen user's role",
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserModel_response_v4_put_citizenaccess_citizens_id_password": {
        "properties": {
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "publicUserModel_v4_get_citizenaccess_citizens_delegatePrivileges": {
        "properties": {
          "firstName": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "permissions": {
            "type": "object"
          },
          "userName": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserPasswordModel": {
        "properties": {
          "password": {
            "description": "The citizen user's password.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserQuestionModel": {
        "properties": {
          "answer": {
            "description": "The answer to the security question for password reset.",
            "type": "string"
          },
          "order": {
            "description": "The order of the security question.",
            "type": "string"
          },
          "question": {
            "description": "The security question for password reset.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserRegisterModel": {
        "properties": {
          "associatedLicenseIds": {
            "description": "Contains license ID's associated with the citizen user.",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cellPhone": {
            "description": "The citizen user's cell phone number.",
            "type": "string"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/peopleModel"
            },
            "type": "array"
          },
          "email": {
            "description": "The citizen user's email address.",
            "type": "string"
          },
          "password": {
            "description": "The citizen user's password.",
            "type": "string"
          },
          "questions": {
            "description": "Contains the security questions for password reset.",
            "items": {
              "$ref": "#/components/schemas/publicUserQuestionModel"
            },
            "type": "array"
          },
          "receiveSMS": {
            "description": "Indicates whether or not the user prefers to receive SMS messages.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "role": {
            "description": "The citizen user's role",
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          },
          "servProvCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "userName": {
            "description": "The user's unique username.",
            "type": "string"
          }
        },
        "required": [
          "userName"
        ],
        "type": "object"
      },
      "publicUserRegisterModel_request_v4_post_citizenaccess_register": {
        "properties": {
          "associatedLicenseIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cellPhone": {
            "description": "",
            "type": "string"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/peopleModel_request_v4_post_citizenaccess_register"
            },
            "type": "array"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "description": "",
            "type": "string"
          },
          "questions": {
            "items": {
              "$ref": "#/components/schemas/publicUserQuestionModel"
            },
            "type": "array"
          },
          "receiveSMS": {
            "description": "",
            "type": "string"
          },
          "role": {
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          },
          "servProvCode": {
            "description": "",
            "type": "string"
          },
          "userName": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "publicUserRegisterModel_response_v4_post_citizenaccess_register": {
        "properties": {
          "associatedLicenseIds": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cellPhone": {
            "description": "",
            "type": "string"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/peopleModel_response_v4_post_citizenaccess_register"
            },
            "type": "array"
          },
          "email": {
            "description": "",
            "type": "string"
          },
          "id": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "description": "",
            "type": "string"
          },
          "questions": {
            "items": {
              "$ref": "#/components/schemas/publicUserQuestionModel"
            },
            "type": "array"
          },
          "receiveSMS": {
            "description": "",
            "type": "string"
          },
          "role": {
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          },
          "servProvCode": {
            "description": "",
            "type": "string"
          },
          "userName": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_citizenProfileModel": {
        "properties": {
          "email": {
            "description": "The citizen user's email address.",
            "type": "string"
          },
          "id": {
            "description": "The user id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "loginName": {
            "description": "The citizen user's login name.",
            "type": "string"
          },
          "mobilePhone": {
            "description": "The citizen user's 10-digit cell phone number.",
            "type": "string"
          },
          "mobilePhoneCountryCode": {
            "description": "The citizen user's cell phone number country code",
            "type": "string"
          },
          "questions": {
            "items": {
              "$ref": "#/components/schemas/publicUserQuestionModel"
            },
            "type": "array"
          },
          "receiveSMS": {
            "description": "Indicates whether or not the user prefers to receive SMS messages.",
            "type": "string"
          },
          "registerDate": {
            "description": "The citizen user's registration date.",
            "format": "date-time",
            "type": "string"
          },
          "role": {
            "description": "The citizen user's role",
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_publicUserDelegateModel": {
        "properties": {
          "invitationMessage": {
            "description": "The invitation message sent to the delegate.",
            "type": "string"
          },
          "name": {
            "description": "The delegate's name.",
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/publicUserDelegatePermissionModel"
            },
            "type": "array"
          },
          "userName": {
            "description": "The delegate's login name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "response_citizenProfileModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/request_citizenProfileModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_delegatePrivilegeModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/delegatePrivilegeModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_messageModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/messageModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_publicUserDelegateModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/publicUserDelegateModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_publicUserDelegateStatusModel": {
        "properties": {
          "delegateStatus": {
            "description": "The status of the delegate request.",
            "type": "string"
          },
          "id": {
            "description": "The id of the user who sent the delegate request.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_publicUserModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/publicUserModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_publicUserRegisterModel": {
        "properties": {
          "associatedLicenseIds": {
            "description": "Contains license ID's associated with the citizen user.",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "cellPhone": {
            "description": "The citizen user's cell phone number.",
            "type": "string"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/peopleModel"
            },
            "type": "array"
          },
          "email": {
            "description": "The citizen user's email address.",
            "type": "string"
          },
          "id": {
            "description": "The citizen id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "password": {
            "description": "The citizen user's password.",
            "type": "string"
          },
          "questions": {
            "description": "Contains the security questions for password reset.",
            "items": {
              "$ref": "#/components/schemas/publicUserQuestionModel"
            },
            "type": "array"
          },
          "receiveSMS": {
            "description": "Indicates whether or not the user prefers to receive SMS messages.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "role": {
            "description": "The citizen user's role",
            "enum": [
              "CONTRACT_INSPECTOR",
              "CITIZEN",
              "AUTH_AGENT_CLERK",
              "AUTH_AGENT",
              "SELF_CERTIFIED_INSPECTOR"
            ],
            "type": "string"
          },
          "servProvCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "userName": {
            "description": "The user's unique username.",
            "type": "string"
          }
        },
        "required": [
          "userName"
        ],
        "type": "object"
      },
      "response_resultCountModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/resultCountModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_resultModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/resultModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_resultModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/resultModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_trustAccountModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/trustAccountModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_userPINModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/userPINModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "resultCountModel": {
        "properties": {
          "failedCount": {
            "description": "The number of failed results.",
            "format": "int64",
            "type": "integer"
          },
          "failedIDs": {
            "description": "The IDs of the entities on which the operation failed.",
            "type": "string"
          },
          "successCount": {
            "description": "The number of successful results.",
            "format": "int64",
            "type": "integer"
          },
          "successIDs": {
            "description": "The IDs of the entities on which the operation succeeded.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "resultCountModel_v4_delete_citizens_id_contacts_contactIds": {
        "properties": {
          "failedCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "failedIDs": {
            "description": "",
            "type": "string"
          },
          "successCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "successIDs": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "resultCountModel_v4_delete_civicid_citizenaccess_contacts_ids": {
        "properties": {
          "failedCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "failedIDs": {
            "description": "",
            "type": "string"
          },
          "successCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "successIDs": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "resultCountModel_v4_post_citizens_id_contacts": {
        "properties": {
          "failedCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "failedIDs": {
            "description": "",
            "type": "string"
          },
          "successCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "successIDs": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "resultCountModel_v4_post_civicid_citizenaccess_contacts": {
        "properties": {
          "failedCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "failedIDs": {
            "description": "",
            "type": "string"
          },
          "successCount": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "successIDs": {
            "description": "",
            "type": "string"
          }
        },
        "type": "object"
      },
      "resultModel": {
        "properties": {
          "code": {
            "description": "The error code, if an error is encountered.",
            "type": "string"
          },
          "id": {
            "description": "The system id of the object in this operation.",
            "format": "int64",
            "type": "integer"
          },
          "isSuccess": {
            "description": "Indicates whether or not the operation on the object is successful.",
            "type": "boolean"
          },
          "message": {
            "description": "The error message, if an error is encountered",
            "type": "string"
          }
        },
        "type": "object"
      },
      "trustAccountModel": {
        "properties": {
          "account": {
            "description": "The account ID number for the trust account.",
            "type": "string"
          },
          "associations": {
            "description": "The trust account associations.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "balance": {
            "description": "The balance of the trust account in dollars.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the trust account.",
            "type": "string"
          },
          "id": {
            "description": "The trust account system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the trust account as the primary source.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "ledgerAccount": {
            "description": "The ledger account of the trust account.",
            "type": "string"
          },
          "overdraft": {
            "description": "Indicates whether or not the trust account can use the overdraft option.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "overdraftLimit": {
            "description": "The overdraft limit amount, in dollars, for the trust account.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "status": {
            "description": "The status of the trust account.",
            "enum": [
              "Active",
              "Closed"
            ],
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "thresholdAmount": {
            "description": "The minimum amount required in a trust account.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "userPINModel": {
        "properties": {
          "active": {
            "description": "Indicates whether or not the account is active. If the account is not activated, the user cannot login Accela Citizen Access.",
            "type": "string"
          },
          "agentId": {
            "description": "The ID of the associated agent of the logged-in user.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The agency id.",
            "type": "string"
          },
          "status": {
            "description": "The citizen userid status.",
            "type": "string"
          },
          "userId": {
            "description": "The citizen userid.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "userPINModel_v4_put_citizenaccess_citizens_id_accounts": {
        "properties": {
          "active": {
            "description": "",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "",
            "type": "string"
          },
          "status": {
            "description": "",
            "type": "string"
          },
          "userId": {
            "description": "",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "assetConditionAssessmentModel": {
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/assetDescriptionModel"
          },
          "assetCAID": {
            "description": "The asset condition assessment ID.",
            "format": "int64",
            "type": "integer"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the assessment.",
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/customAttributeModel"
          },
          "comments": {
            "description": "The name of the inspector performing the assessment.",
            "type": "string"
          },
          "inspectorFullName": {
            "description": "The unique identifier of the inspector.",
            "type": "string"
          },
          "inspectorId": {
            "description": "The inspector id.",
            "type": "string"
          },
          "scheduledDate": {
            "description": "The scheduled assessment date, in yyyy-mm-dd format.",
            "format": "date-time",
            "type": "string"
          },
          "scheduledTime": {
            "description": "The scheduled assessment time, in hh:mm AM/PM format.",
            "type": "string"
          },
          "status": {
            "description": "The assessment status.",
            "type": "string"
          },
          "timeSpent": {
            "description": "The number of hours spent on the assessment.",
            "format": "double",
            "type": "number"
          },
          "type": {
            "description": "The type of assessment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetDescriptionModel": {
        "properties": {
          "description": {
            "description": "The asset description.",
            "type": "string"
          },
          "group": {
            "description": "The group the asset belongs to.",
            "type": "string"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "status": {
            "description": "The asset status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The asset type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetExtModel": {
        "properties": {
          "assetId": {
            "description": "The unique alpha-numeric asset ID in an asset group.\n\n**Added in Civic Platform version**: 9.2.0\n\n",
            "type": "string"
          },
          "classType": {
            "description": "A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.\t",
            "type": "string"
          },
          "comments": {
            "description": "General comments about the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "currentValue": {
            "description": "The current value of the asset.",
            "format": "double",
            "type": "number"
          },
          "dateOfService": {
            "description": "The date the asset was initially placed into service.",
            "format": "date-time",
            "type": "string"
          },
          "dependentFlag": {
            "description": "Indicates whether or not the parent asset is dependent on this asset.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "depreciationAmount": {
            "description": "The decline in the asset value by the asset depreciation calculation.",
            "format": "double",
            "type": "number"
          },
          "depreciationEndDate": {
            "description": "The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationStartDate": {
            "description": "The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationValue": {
            "description": "The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endID": {
            "description": "The ending point asset ID.",
            "type": "string"
          },
          "gisObjects": {
            "items": {
              "$ref": "#/components/schemas/gISObjectModel"
            },
            "type": "array"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The descriptive name of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "number": {
            "description": "The unique, alpha-numeric asset ID.",
            "type": "string"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/simpleRecordModel"
            },
            "type": "array"
          },
          "salvageValue": {
            "description": "The residual value of the asset at the end of it’s useful life.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "A positive numeric value for the asset size.",
            "format": "double",
            "type": "number"
          },
          "sizeUnit": {
            "description": "The unit of measure corresponding to the asset size.",
            "type": "string"
          },
          "startID": {
            "description": "The starting point asset ID.",
            "type": "string"
          },
          "startValue": {
            "description": "The beginning value or purchase price of the asset.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The status of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date the asset status changed.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "assetMasterModel": {
        "properties": {
          "assetId": {
            "description": "The unique alpha-numeric asset ID in an asset group.\n\n**Added in Civic Platform version**: 9.2.0\n\n",
            "type": "string"
          },
          "classType": {
            "description": "A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.\t",
            "type": "string"
          },
          "comments": {
            "description": "General comments about the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "currentValue": {
            "description": "The current value of the asset.",
            "format": "double",
            "type": "number"
          },
          "dateOfService": {
            "description": "The date the asset was initially placed into service.",
            "format": "date-time",
            "type": "string"
          },
          "dependentFlag": {
            "description": "Indicates whether or not the parent asset is dependent on this asset.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "depreciationAmount": {
            "description": "The decline in the asset value by the asset depreciation calculation.",
            "format": "double",
            "type": "number"
          },
          "depreciationEndDate": {
            "description": "The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationStartDate": {
            "description": "The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationValue": {
            "description": "The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endID": {
            "description": "The ending point asset ID.",
            "type": "string"
          },
          "gisObjects": {
            "items": {
              "$ref": "#/components/schemas/gISObjectModel"
            },
            "type": "array"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The descriptive name of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "number": {
            "description": "The unique, alpha-numeric asset ID.",
            "type": "string"
          },
          "salvageValue": {
            "description": "The residual value of the asset at the end of it’s useful life.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "A positive numeric value for the asset size.",
            "format": "double",
            "type": "number"
          },
          "sizeUnit": {
            "description": "The unit of measure corresponding to the asset size.",
            "type": "string"
          },
          "startID": {
            "description": "The starting point asset ID.",
            "type": "string"
          },
          "startValue": {
            "description": "The beginning value or purchase price of the asset.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The status of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date the asset status changed.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "assetRelatedModel": {
        "properties": {
          "assetId": {
            "description": "The unique alpha-numeric asset ID in an asset group.\n\n**Added in Civic Platform version**: 9.2.0\n\n",
            "type": "string"
          },
          "classType": {
            "description": "A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.\t",
            "type": "string"
          },
          "comments": {
            "description": "General comments about the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "currentValue": {
            "description": "The current value of the asset.",
            "format": "double",
            "type": "number"
          },
          "dateOfService": {
            "description": "The date the asset was initially placed into service.",
            "format": "date-time",
            "type": "string"
          },
          "dependentFlag": {
            "description": "Indicates whether or not the parent asset is dependent on this asset.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "depreciationAmount": {
            "description": "The decline in the asset value by the asset depreciation calculation.",
            "format": "double",
            "type": "number"
          },
          "depreciationEndDate": {
            "description": "The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationStartDate": {
            "description": "The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationValue": {
            "description": "The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endID": {
            "description": "The ending point asset ID.",
            "type": "string"
          },
          "gisObjects": {
            "items": {
              "$ref": "#/components/schemas/gISObjectModel"
            },
            "type": "array"
          },
          "group": {
            "description": "The asset group.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "hasChild": {
            "description": "Indicates whether or not the asset has child assets.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "linkedAssetID": {
            "description": "The asset ID of the linked asset.",
            "type": "string"
          },
          "linkedAssetSeqNbr": {
            "description": "The unique sequence id of the linked asset, assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The descriptive name of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "number": {
            "description": "The unique, alpha-numeric asset ID.",
            "type": "string"
          },
          "salvageValue": {
            "description": "The residual value of the asset at the end of it’s useful life.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "A positive numeric value for the asset size.",
            "format": "double",
            "type": "number"
          },
          "sizeUnit": {
            "description": "The unit of measure corresponding to the asset size.",
            "type": "string"
          },
          "startID": {
            "description": "The starting point asset ID.",
            "type": "string"
          },
          "startValue": {
            "description": "The beginning value or purchase price of the asset.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The status of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date the asset status changed.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "assetUsageArray": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "isSuccess": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "assetWithAttributesModel": {
        "properties": {
          "attributeTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "attributes": {
            "$ref": "#/components/schemas/customAttributeModel"
          },
          "classType": {
            "description": "A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.\t",
            "type": "string"
          },
          "comments": {
            "description": "General comments about the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "currentValue": {
            "description": "The current value of the asset.",
            "format": "double",
            "type": "number"
          },
          "dateOfService": {
            "description": "The date the asset was initially placed into service.",
            "format": "date-time",
            "type": "string"
          },
          "dependentFlag": {
            "description": "Indicates whether or not the parent asset is dependent on this asset.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "depreciationAmount": {
            "description": "The decline in the asset value by the asset depreciation calculation.",
            "format": "double",
            "type": "number"
          },
          "depreciationEndDate": {
            "description": "The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationStartDate": {
            "description": "The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationValue": {
            "description": "The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endID": {
            "description": "The ending point asset ID.",
            "type": "string"
          },
          "gisObjects": {
            "items": {
              "$ref": "#/components/schemas/gISObjectModel"
            },
            "type": "array"
          },
          "group": {
            "description": "The asset group.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The descriptive name of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "number": {
            "description": "The unique, alpha-numeric asset ID.",
            "type": "string"
          },
          "salvageValue": {
            "description": "The residual value of the asset at the end of it’s useful life.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "A positive numeric value for the asset size.",
            "format": "double",
            "type": "number"
          },
          "sizeUnit": {
            "description": "The unit of measure corresponding to the asset size.",
            "type": "string"
          },
          "startID": {
            "description": "The starting point asset ID.",
            "type": "string"
          },
          "startValue": {
            "description": "The beginning value or purchase price of the asset.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The status of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date the asset status changed.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "assetsRecordsArray": {
        "properties": {
          "id": {
            "type": "string"
          },
          "page": {
            "properties": {
              "hasmore": {
                "type": "boolean"
              },
              "limit": {
                "type": "string"
              },
              "offset": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/recordsArrayInAssetsRecordsArray"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "attributeMetadataModel": {
        "properties": {
          "attributeGroup": {
            "description": "The group the attribute belongs to.",
            "type": "string"
          },
          "attributeLabel": {
            "description": "The attribute's display label.",
            "type": "string"
          },
          "attributeLength": {
            "description": "The number of characters the attribute field allows.",
            "type": "string"
          },
          "attributeName": {
            "description": "The unique name of the attribute. This name is for administrative use only; it is not used for display purposes.",
            "type": "string"
          },
          "defaultValue": {
            "description": "The attribute's default value.",
            "type": "string"
          },
          "description": {
            "description": "The attribute's description.",
            "type": "string"
          },
          "displayOrder": {
            "description": "The attribute's display position.",
            "format": "int64",
            "type": "integer"
          },
          "displayStatus": {
            "description": "The attribute's display status.",
            "type": "string"
          },
          "isDropdownList": {
            "description": "Indicates whether or not the attribute is a dropdown list.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "options": {
            "description": "Contains the dropdown list values.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "rangeSearchFlag": {
            "description": "Indicates whether or not the attribute allows a search range.",
            "type": "string"
          },
          "recordStatus": {
            "description": "Indicates whether or not the attribute is active.",
            "type": "string"
          },
          "searchableFlag": {
            "description": "Indicates whether or not the attribute is searchable.",
            "type": "string"
          },
          "unitType": {
            "description": "The unit of measure used with the attribute.",
            "type": "string"
          },
          "updatedBy": {
            "description": "The user who last updated the attribute.",
            "type": "string"
          },
          "updatedDate": {
            "description": "The date and time the attribute was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "valueDataType": {
            "description": "The data type of the attribute value.",
            "type": "string"
          },
          "valueRequired": {
            "description": "Indicates whether or not the attribute value is required.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "customAttributeModel": {
        "properties": {
          "aCustomFieldName": {
            "description": "The name of a custom field.",
            "type": "string"
          },
          "aCustomFieldValue": {
            "description": "The value of a custom field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "documentModel": {
        "properties": {
          "category": {
            "description": "The document category. The list of category options varies depending on the document group.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "deletable": {
            "$ref": "#/components/schemas/userRolePrivilegeModel",
            "description": "Contains permission assignments for deleting documents."
          },
          "department": {
            "description": "The name of the department the document belongs to.",
            "type": "string"
          },
          "description": {
            "description": "The document description.",
            "type": "string"
          },
          "downloadable": {
            "$ref": "#/components/schemas/userRolePrivilegeModel",
            "description": "Contains permission assignments for downloading documents."
          },
          "entityId": {
            "description": "The unique ID of the entity or record.",
            "type": "string"
          },
          "entityType": {
            "description": "The type of entity.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file as it displays in the source location.",
            "type": "string"
          },
          "group": {
            "description": "The document group.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The document id.",
            "format": "int64",
            "type": "integer"
          },
          "modifiedBy": {
            "description": "The user account that last modified the document.",
            "type": "string"
          },
          "modifiedDate": {
            "description": "The date the document was last modified.",
            "format": "date-time",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "The file size of the document.",
            "format": "double",
            "type": "number"
          },
          "source": {
            "description": "The name for your agency's electronic document management system.",
            "type": "string"
          },
          "status": {
            "description": "The documet status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "titleViewable": {
            "$ref": "#/components/schemas/userRolePrivilegeModel",
            "description": "Contains permission assignments for viewing document names."
          },
          "type": {
            "description": "The document type.",
            "type": "string"
          },
          "uploadedBy": {
            "description": "The user who uploaded the document to the record.",
            "type": "string"
          },
          "uploadedDate": {
            "description": "The date when the document was uploaded.",
            "format": "date-time",
            "type": "string"
          },
          "virtualFolders": {
            "description": "This is the virtual folder for storing the attachment. With virtual folders you can organize uploaded attachments in groups",
            "type": "string"
          }
        },
        "type": "object"
      },
      "gISObjectModel": {
        "properties": {
          "gisId": {
            "description": "The GIS object id.",
            "type": "string"
          },
          "layerId": {
            "description": "The map layer id.",
            "type": "string"
          },
          "serviceId": {
            "description": "The map service id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordExpirationModel": {
        "properties": {
          "expirationDate": {
            "description": "The date when the condition expires.",
            "format": "date-time",
            "type": "string"
          },
          "expirationStatus": {
            "description": "Indicates whether the expiration is enabled or disabled. See [Get All Record Expiration Statuses](./api-settings.html#operation/v4.get.settings.records.expirationStatuses).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "recordTypeModel": {
        "properties": {
          "alias": {
            "description": "The record type alias.",
            "type": "string"
          },
          "category": {
            "description": "The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "filterName": {
            "description": "The name of the record type filter which defines the record types to be displayed for the citizen user.",
            "type": "string"
          },
          "group": {
            "description": "The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "id": {
            "description": "The record type id.",
            "type": "string"
          },
          "module": {
            "description": "The module the record type belongs to.",
            "type": "string"
          },
          "subType": {
            "description": "The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "text": {
            "description": "The localized display text.",
            "type": "string"
          },
          "type": {
            "description": "The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "value": {
            "description": "The stored value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordsArrayInAssetsRecordsArray": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_assessmentModel": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/customAttributeModel"
          },
          "comment": {
            "description": "Comments or notes about the assessment.",
            "type": "string"
          },
          "conditionAssessment": {
            "description": "The condition assessment type. See [Get All Condition Assessment Types](./api-settings.html#operation/v4.get.settings.assessments.types).",
            "type": "string"
          },
          "inspectionDate": {
            "description": "The inspection date for the assessment, in yyyy-mm-dd format.",
            "type": "string"
          },
          "inspectionTime": {
            "description": "The inspection time for the assessment, in hh:mm AM/PM format.",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "scheduleDate": {
            "description": "The scheduled assessment date, in yyyy-mm-dd format.",
            "type": "string"
          },
          "scheduleTime": {
            "description": "The scheduled assessment time, in hh:mm AM/PM format.",
            "type": "string"
          },
          "status": {
            "description": "The status of the condition assessment",
            "enum": [
              "Completed",
              "Scheduled"
            ],
            "type": "string"
          },
          "timeSpent": {
            "description": "The number of hours spent on the assessment.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "request_assetUsageArray": {
        "properties": {
          "unitType": {
            "type": "string"
          },
          "usageReading": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_assetUsageModel": {
        "items": {
          "$ref": "#/components/schemas/request_assetUsageArray"
        },
        "type": "array"
      },
      "response_assetConditionAssessmentModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetConditionAssessmentModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetExtModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetExtModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetMasterModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetMasterModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetRelatedModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetRelatedModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetUsageModel": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetUsageArray"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetsRecordsModel": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetsRecordsArray"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_attributeMetadataModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/attributeMetadataModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_customAttributeModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_documentModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/documentModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_simpleRecordModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/simpleRecordModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "rowModel": {
        "properties": {
          "action": {
            "description": "The requested operation on the row.",
            "enum": [
              "add",
              "update",
              "delete"
            ],
            "type": "string"
          },
          "fields": {
            "$ref": "#/components/schemas/customAttributeModel1"
          },
          "id": {
            "description": "The row id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "simpleRecordModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "completedDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The Civic Platform product  where the application is submitted: \"AA\" : Classic Accela Automation. \"ACA\" : Accela Citizen Access. \"AIVR\" : Accela Integrated Voice Response. \"AMO\" : Accela Mobile Office. \"AV360\" : Accela Asset Management, Accela Land Management.",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier,",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.\t",
            "format": "date-time",
            "type": "string"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusType": {
            "description": "The record status type.",
            "enum": [
              "APPROVED",
              "CLOSED",
              "COMPLETE",
              "DENIED",
              "INCOMPLETE",
              "OPEN",
              "PENDING",
              "UNASSIGNED",
              "VOID"
            ],
            "type": "string"
          },
          "totalFee": {
            "description": "The total amount of the fees invoiced to the record.",
            "format": "double",
            "type": "number"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The total amount of pay.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "updateDate": {
            "description": "The date the record was last updated.",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "The record value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "tableModel": {
        "properties": {
          "id": {
            "description": "The custom table id.",
            "type": "string"
          },
          "rows": {
            "description": "A table row containing custom fields.",
            "items": {
              "$ref": "#/components/schemas/rowModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "userRolePrivilegeModel": {
        "properties": {
          "contactAllowed": {
            "description": "Indicates whether or not the permission is given to a contact.",
            "type": "boolean"
          },
          "deleteAllowed": {
            "description": "Indicates whether or not the permission to delete a document is allowed.\t",
            "type": "boolean"
          },
          "downloadAllowed": {
            "description": "Indicates whether or not the permission to download a document is allowed.",
            "type": "boolean"
          },
          "licenseTypeRules": {
            "items": {
              "description": "A string array containing the types of licensed professionals who are given the permission.\t",
              "type": "string"
            },
            "type": "array"
          },
          "licensendProfessionalAllowed": {
            "description": "Indicates whether or not the permission is given to a licensed professional.",
            "type": "boolean"
          },
          "ownerAllowed": {
            "description": "Indicates whether or not the permission is given to an owner.",
            "type": "boolean"
          },
          "recordCreatorAllowed": {
            "description": "Indicates whether or not the permission is given to a record creator.",
            "type": "boolean"
          },
          "registeredUserAllowed": {
            "description": "Indicates whether or not the permission is given to a registered public user.",
            "type": "boolean"
          },
          "titleViewAllowed": {
            "description": "Indicates whether or not the permission to view a document name is allowed.",
            "type": "boolean"
          },
          "uploadAllowed": {
            "description": "Indicates whether or not the permission to upload a document is allowed.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "aSITableDrill": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/childDrill"
            },
            "type": "array"
          },
          "isRoot": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "activityModel": {
        "properties": {
          "activityStatus": {
            "description": "The status of the record activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedDepartment": {
            "description": "The department responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedUser": {
            "description": "The staff member responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The activity description",
            "type": "string"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The activity system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The activity name.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "startDate": {
            "description": "The activity start date.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The activity status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The activity type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "addressModel": {
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "addressTypeFlag": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "county": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "distance": {
            "format": "double",
            "type": "number"
          },
          "houseAlphaEnd": {
            "type": "string"
          },
          "houseAlphaStart": {
            "type": "string"
          },
          "houseFractionEnd": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "houseFractionStart": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "inspectionDistrict": {
            "type": "string"
          },
          "inspectionDistrictPrefix": {
            "type": "string"
          },
          "isPrimary": {
            "type": "string"
          },
          "levelEnd": {
            "type": "string"
          },
          "levelPrefix": {
            "type": "string"
          },
          "levelStart": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string"
          },
          "neighborhoodPrefix": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/capIDModel"
          },
          "refAddressId": {
            "format": "int64",
            "type": "integer"
          },
          "secondaryStreet": {
            "type": "string"
          },
          "secondaryStreetNumber": {
            "type": "integer"
          },
          "serviceProviderCode": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "status": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "streetAddress": {
            "type": "string"
          },
          "streetEnd": {
            "type": "integer"
          },
          "streetEndFrom": {
            "type": "integer"
          },
          "streetEndTo": {
            "type": "integer"
          },
          "streetName": {
            "type": "string"
          },
          "streetPrefix": {
            "type": "string"
          },
          "streetStart": {
            "type": "integer"
          },
          "streetStartFrom": {
            "type": "integer"
          },
          "streetStartTo": {
            "type": "integer"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "streetSuffixDirection": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "type": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "unitEnd": {
            "type": "string"
          },
          "unitStart": {
            "type": "string"
          },
          "unitType": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "xCoordinate": {
            "format": "double",
            "type": "number"
          },
          "yCoordinate": {
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "apo_customForm": {
        "description": "A set of custom field name-value pairs on a custom form. \n\nAdded in Civic Platform version: 9.2.0",
        "properties": {
          "aCustomFieldName": {
            "description": "A custom field name. Note that this is the custom attribute name (not the attribute label). To get the attribute display label, use [Get Record Address Custom Forms Metadata](#operation/v4.get.records.recordId.addresses.addressId.customForms.meta).",
            "type": "string"
          },
          "aCustomFieldValue": {
            "description": "A custom field value",
            "type": "string"
          },
          "id": {
            "description": "The unique string id of the custom form template for the custom data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apo_customForms_metadata": {
        "description": "Contains metadata description of a custom form, including the custom fields metadata. \n\nAdded in Civic Platform version: 9.2.0",
        "properties": {
          "customFormType": {
            "description": "Indicates whether the custom form is for an address, parcel, or owner.",
            "enum": [
              "address",
              "parcel",
              "owner"
            ],
            "type": "string"
          },
          "description": {
            "description": "Describes the usage or puporse of the custom form.",
            "type": "string"
          },
          "fields": {
            "description": "Contains the field metadata.",
            "items": {
              "$ref": "#/components/schemas/apo_customForms_metadata_fields"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique string identifier of the custom form.",
            "type": "string"
          },
          "name": {
            "description": "The name of the custom form",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apo_customForms_metadata_fields": {
        "description": "Describes the metadata of a custom field. \n\nAdded in Civic Platform version: 9.2.0",
        "properties": {
          "dataType": {
            "description": "The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.",
            "enum": [
              "Number",
              "Text",
              "Date",
              "Radio",
              "DropdownList"
            ],
            "type": "string"
          },
          "defaultValue": {
            "description": "Any default value for the custom field.",
            "type": "string"
          },
          "description": {
            "description": "Describes the usage or purpose of the custom field.",
            "type": "string"
          },
          "displayOrder": {
            "description": "The display order of the field on the custom form.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The unique custom field id.",
            "format": "int64",
            "type": "integer"
          },
          "isPublicVisible": {
            "description": "Indicates whether or not a citizen user can see this field.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isRecordSearchable": {
            "description": "Indicates whether or not the field is searchable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isRequired": {
            "description": "Indicates whether or not the field is required.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "label": {
            "description": "The field label.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "maxLength": {
            "description": "The field maximum length.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The field name.",
            "type": "string"
          },
          "options": {
            "description": "Contains possible field values, if the field is a dropdown field type.",
            "items": {
              "description": "A dropdown field value.",
              "properties": {
                "text": {
                  "description": "The localized display value.",
                  "type": "string"
                },
                "value": {
                  "description": "The data value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "sharedDropdownListName": {
            "description": "The name of the shared dropdown list, if the field is a dropdown field type.",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measure of a numeric custom field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "assetMasterModel1": {
        "properties": {
          "assetId": {
            "description": "The unique alpha-numeric asset ID in an asset group. \n\n**Added in Civic Platform version**: 9.2.0\n\n",
            "type": "string"
          },
          "classType": {
            "description": "A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together.\t",
            "type": "string"
          },
          "comments": {
            "description": "General comments about the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "currentValue": {
            "description": "The current value of the asset.",
            "format": "double",
            "type": "number"
          },
          "dateOfService": {
            "description": "The date the asset was initially placed into service.",
            "format": "date-time",
            "type": "string"
          },
          "dependentFlag": {
            "description": "Indicates whether or not the parent asset is dependent on this asset.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "depreciationAmount": {
            "description": "The decline in the asset value by the asset depreciation calculation.",
            "format": "double",
            "type": "number"
          },
          "depreciationEndDate": {
            "description": "The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationStartDate": {
            "description": "The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.",
            "format": "date-time",
            "type": "string"
          },
          "depreciationValue": {
            "description": "The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endID": {
            "description": "The ending point asset ID.",
            "type": "string"
          },
          "gisObjects": {
            "items": {
              "$ref": "#/components/schemas/gISObjectModel"
            },
            "type": "array"
          },
          "id": {
            "description": "The asset system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The descriptive name of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "number": {
            "description": "The unique, alpha-numeric asset ID.",
            "type": "string"
          },
          "salvageValue": {
            "description": "The residual value of the asset at the end of itâ€™s useful life.",
            "format": "double",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "size": {
            "description": "A positive numeric value for the asset size.",
            "format": "double",
            "type": "number"
          },
          "sizeUnit": {
            "description": "The unit of measure corresponding to the asset size.",
            "type": "string"
          },
          "startID": {
            "description": "The starting point asset ID.",
            "type": "string"
          },
          "startValue": {
            "description": "The beginning value or purchase price of the asset.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The status of the asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date the asset status changed.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The type of asset.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "capConditionModel_2": {
        "properties": {
          "actionbyDepartment": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "actionbyUser": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "activeStatus": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "additionalInformation": {
            "type": "string"
          },
          "additionalInformationPlainText": {
            "type": "string"
          },
          "agencyListSQL": {
            "type": "string"
          },
          "appliedDate": {
            "format": "date-time",
            "type": "string"
          },
          "appliedbyDepartment": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "appliedbyUser": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "dispAdditionalInformationPlainText": {
            "type": "string"
          },
          "displayNoticeInAgency": {
            "type": "boolean"
          },
          "displayNoticeInCitizens": {
            "type": "boolean"
          },
          "displayNoticeInCitizensFee": {
            "type": "boolean"
          },
          "displayOrder": {
            "format": "int64",
            "type": "integer"
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "inheritable": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "isIncludeNameInNotice": {
            "type": "boolean"
          },
          "isIncludeShortCommentsInNotice": {
            "type": "boolean"
          },
          "longComments": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "publicDisplayMessage": {
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/capIDModel"
          },
          "resAdditionalInformationPlainText": {
            "type": "string"
          },
          "resolutionAction": {
            "type": "string"
          },
          "serviceProviderCode": {
            "type": "string"
          },
          "serviceProviderCodes": {
            "items": {},
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "shortComments": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "statusDate": {
            "format": "date-time",
            "type": "string"
          },
          "statusType": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/identifierModel1"
          }
        },
        "type": "object"
      },
      "capIDModel": {
        "properties": {
          "customId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "serviceProviderCode": {
            "type": "string"
          },
          "trackingId": {
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "childDrill": {
        "properties": {
          "drillId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "commentModel": {
        "properties": {
          "displayOnInspection": {
            "description": "Indicates whether or not the comment is displayed on inspection.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "text": {
            "description": "The comment text.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "compactAddressModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "state": {
            "description": "The address state.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "conditionHistoryModel": {
        "properties": {
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "activeStatus": {
            "description": "Indicates whether or not the condition is active.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "additionalInformation": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "additionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "appliedDate": {
            "description": "The date the standard condition was applied.",
            "format": "date-time",
            "type": "string"
          },
          "appliedbyDepartment": {
            "description": "The department responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "appliedbyUser": {
            "description": "The staff member responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "dispAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "displayNoticeInAgency": {
            "description": "Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizens": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizensFee": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "effectiveDate": {
            "description": "The date when you want the condition to become effective.",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date when the condition expires.",
            "format": "date-time",
            "type": "string"
          },
          "group": {
            "description": "The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The condition system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inheritable": {
            "description": "This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "isIncludeNameInNotice": {
            "description": "Indicates whether or not to display the condition name in the notice.",
            "type": "boolean"
          },
          "isIncludeShortCommentsInNotice": {
            "description": "Indicates whether or not to display the condition comments in the notice.",
            "type": "boolean"
          },
          "longComments": {
            "description": "Narrative comments to help identify the purpose or uses of the standard condition.",
            "type": "string"
          },
          "name": {
            "description": "The name of the standard condition.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicDisplayMessage": {
            "description": "Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).",
            "type": "string"
          },
          "resAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "resolutionAction": {
            "description": "he action performed in response to a condition.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortComments": {
            "description": "A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it",
            "type": "string"
          },
          "status": {
            "description": "The condition status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "statusType": {
            "description": "The status type for a standard condition or an approval condition, applied or not applied for example.",
            "type": "string"
          },
          "type": {
            "description": "The condition type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "contactAddress": {
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "addressLine3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "direction": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "faxCountryCode": {
            "type": "string"
          },
          "houseAlphaEnd": {
            "type": "string"
          },
          "houseAlphaStart": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "type": "string"
          },
          "levelEnd": {
            "type": "string"
          },
          "levelPrefix": {
            "type": "string"
          },
          "levelStart": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phoneCountryCode": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "status": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "streetAddress": {
            "type": "string"
          },
          "streetEnd": {
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "type": "string"
          },
          "streetPrefix": {
            "type": "string"
          },
          "streetStart": {
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "streetSuffixDirection": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "type": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "unitEnd": {
            "type": "string"
          },
          "unitStart": {
            "type": "string"
          },
          "unitType": {
            "$ref": "#/components/schemas/identifierModel1"
          }
        },
        "type": "object"
      },
      "contactTypeModel": {
        "properties": {
          "maxOccurance": {
            "description": "The maximum number of times a contact type is used.",
            "format": "int64",
            "type": "integer"
          },
          "minOccurance": {
            "description": "The minimum number of times a contact type is used.",
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "description": "The contact type value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "costingModel": {
        "properties": {
          "comments": {
            "description": "Comments about the cost.",
            "type": "string"
          },
          "costAccount": {
            "description": "The cost account name.",
            "type": "string"
          },
          "costDate": {
            "description": "The date when the cost applied.",
            "format": "date-time",
            "type": "string"
          },
          "costFactor": {
            "description": "The cost factor.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "costItem": {
            "description": "The cost item name.",
            "type": "string"
          },
          "dispCostingCostItem": {
            "description": "The cost item display name.",
            "type": "string"
          },
          "distributeFlag": {
            "description": "Indicates whether or not costing is distributed.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "endTime": {
            "description": "The end time associated to the cost item.",
            "type": "string"
          },
          "fixedRate": {
            "description": "The fixed rate associated to the cost item.",
            "format": "double",
            "type": "number"
          },
          "id": {
            "description": "The cost item system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "description": "The cost item quantity.",
            "format": "double",
            "type": "number"
          },
          "quantityDetail": {
            "description": "Details about the cost item quantity.",
            "type": "string"
          },
          "quantityDetailList": {
            "$ref": "#/components/schemas/costingQuantityModel"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "relatedAsgnNbr": {
            "description": "Related cost item.",
            "format": "int64",
            "type": "integer"
          },
          "startTime": {
            "description": "The start time associated to the cost item.",
            "type": "string"
          },
          "status": {
            "description": "The cost item status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "totalCost": {
            "description": "The total cost.",
            "format": "double",
            "type": "number"
          },
          "type": {
            "description": "The cost item type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitOfMeasure": {
            "description": "The cost item's unit of measure.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitRate": {
            "description": "The cost unit rate.",
            "format": "double",
            "type": "number"
          },
          "workOrderTaskCode": {
            "description": "The work order task code associated to the cost item.",
            "type": "string"
          },
          "workOrderTaskCodeIndex": {
            "description": "The order of the work order task.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "costingQuantityModel": {
        "properties": {
          "factor": {
            "description": "The cost factor.",
            "format": "double",
            "type": "number"
          },
          "minutes": {
            "description": "The number of minutes associated to the cost.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "customAttributeModel1": {
        "description": "Contains a custom form consisting of the custom form id and custom field name and value pairs. For example in JSON, \"My Custom Field\": \"My Custom Value\". The custom field name and its data type are defined in Civic Platform custom forms or custom tables: <br/>**For a Text field**, the maximum length is 256.  <br/>**For a Number field**, any numeric form is allowed, including negative numbers.  <br/>**For a Date field**, the format is MM/dd/yyyy.  <br/>**For a Time field**, the format is hh:mm.  <br/>**For a TextArea field**, the maximum length is 4000 characters, and allows line return characters.  <br/>**For a DropdownList field**, the dropdown list values are in the options[] array.  <br/>**For a CheckBox field**, the (case-sensitive) valid values are \"UNCHECKED\" and \"CHECKED\".  <br/>**For a Radio(Y/N) field**, the (case-sensitive) valid values are \"Yes\" and \"No\".",
        "properties": {
          "<aCustomFieldName>": {
            "description": "The name of a custom field.",
            "type": "string"
          },
          "<aCustomFieldValue>": {
            "description": "The value of a custom field.",
            "type": "string"
          },
          "id": {
            "description": "The custom form id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "customFormField": {
        "properties": {
          "displayOrder": {
            "description": "",
            "format": "int64",
            "type": "integer"
          },
          "drillDown": {
            "$ref": "#/components/schemas/aSITableDrill"
          },
          "fieldType": {
            "description": "The custom field data type.",
            "type": "string"
          },
          "id": {
            "description": "The custom field system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "isReadonly": {
            "description": "Indicates whether or not the custom field is read-only.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isRequired": {
            "description": "Indicates whether or not the custom field is required.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "maxLength": {
            "description": "The custom field length",
            "format": "int64",
            "type": "integer"
          },
          "options": {
            "items": {
              "description": "A dropdown option value.",
              "properties": {
                "text": {
                  "description": "The localized display value.",
                  "type": "string"
                },
                "value": {
                  "description": "The data value.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "text": {
            "description": "The custom field localized text.",
            "type": "string"
          },
          "value": {
            "description": "The custom field stored value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "customFormMetadataModel": {
        "description": "Contains the metadata for a custom table.",
        "properties": {
          "displayOrder": {
            "description": "The custom table's display order.",
            "format": "int64",
            "type": "integer"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/customFormField"
            },
            "type": "array"
          },
          "id": {
            "description": "The custom table id.",
            "type": "string"
          },
          "text": {
            "description": "The custom table name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "customFormSubgroupModel": {
        "properties": {
          "displayOrder": {
            "description": "The custom form subgroup display order.",
            "format": "int64",
            "type": "integer"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/customFormField"
            },
            "type": "array"
          },
          "id": {
            "description": "The custom form subgroup system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "text": {
            "description": "The custom form subgroup name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "departmentModel": {
        "properties": {
          "agency": {
            "description": "The department agency",
            "type": "string"
          },
          "bureau": {
            "description": "The name of the bureau, which is an organization level within an agency.",
            "type": "string"
          },
          "division": {
            "description": "The name of the division, which is an organization level within a bureau.",
            "type": "string"
          },
          "group": {
            "description": "The department group.",
            "type": "string"
          },
          "id": {
            "description": "The department system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "office": {
            "description": "An organization level within a group. An office is the final level within an organization structure. Agency->Bureau->Division->Section->Group->Office.",
            "type": "string"
          },
          "section": {
            "description": "A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "text": {
            "description": "The localized display text.",
            "type": "string"
          },
          "value": {
            "description": "The value for the specified parameter.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "describeRecordModel": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/elementModel"
            },
            "type": "array"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/fieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "documentTypeModel": {
        "properties": {
          "deletable": {
            "description": "Indicates whether or not the record can be deleted.",
            "type": "boolean"
          },
          "downloadable": {
            "description": "Indicates whether or not the document type can be downloaded.",
            "type": "boolean"
          },
          "group": {
            "description": "The document group for the document category.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The document category system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "text": {
            "description": "The localized display text.",
            "type": "string"
          },
          "uploadable": {
            "description": "Indicates whether or not you can upload documents of the specified category.",
            "type": "boolean"
          },
          "value": {
            "description": "The document category value.",
            "type": "string"
          },
          "viewable": {
            "description": "Indicates whether or not you can view the document category associated with the record.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "elementModel": {
        "properties": {
          "isReference": {
            "description": "Indicates whether or not the entity is a reference.",
            "type": "boolean"
          },
          "isRequired": {
            "description": "Indicates whether or not the entity is required.",
            "type": "boolean"
          },
          "name": {
            "description": "The entity name.",
            "type": "string"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/contactTypeModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "estimateFeeModel": {
        "properties": {
          "currencyCode": {
            "description": "The standard ISO 4217 currency code. For example, \"USD\" for US Dollars",
            "type": "string"
          },
          "feeTotal": {
            "description": "The total fee.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "feeItemBaseModel": {
        "properties": {
          "code": {
            "description": "The fee item code.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "feeNotes": {
            "description": "Notes about the fee.",
            "type": "string"
          },
          "id": {
            "description": "The fee item system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "paymentPeriod": {
            "description": "The time interval for processing invoices.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "quantity": {
            "description": "The number of units for which the same fee applies.",
            "format": "double",
            "type": "number"
          },
          "schedule": {
            "description": "Contains parameters that define the fee schedule.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "version": {
            "description": "The fee schedule version.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "feeItemBaseModel_1": {
        "properties": {
          "code": {
            "description": "The fee item code.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The fee item system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "notes": {
            "description": "A note entered against a fee item.\t",
            "type": "string"
          },
          "paymentPeriod": {
            "description": "The time interval for processing invoices.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "quantity": {
            "description": "The number of units for which the fee applies.",
            "format": "double",
            "type": "number"
          },
          "schedule": {
            "description": "Contains parameters that define the fee schedule. See [Get All Fee Schedules for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.fees.schedules).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "version": {
            "description": "The fee item version.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "feeItemModel": {
        "properties": {
          "acaRequiredFlag": {
            "description": "Indicates whether or not the fee schedule is required in order to make it accessible to citizens.",
            "type": "string"
          },
          "accountCode1": {
            "description": "The code associated with the first fee",
            "type": "string"
          },
          "accountCode1Allocation": {
            "description": "Allocation proportion or amount of account code 1.",
            "format": "double",
            "type": "number"
          },
          "accountCode2": {
            "description": "The code associated with the second fee",
            "type": "string"
          },
          "accountCode2Allocation": {
            "description": "Allocation proportion or amount of account code 2.",
            "format": "double",
            "type": "number"
          },
          "accountCode3": {
            "description": "The code associated with the third fee",
            "type": "string"
          },
          "accountCode3Allocation": {
            "description": "Allocation proportion or amount of account code 3.",
            "format": "double",
            "type": "number"
          },
          "allocatedFee1": {
            "description": "The allocated fee for account code 1.",
            "format": "double",
            "type": "number"
          },
          "allocatedFee2": {
            "description": "The allocated fee for account code 2.",
            "format": "double",
            "type": "number"
          },
          "allocatedFee3": {
            "description": "The allocated fee for account code 3.",
            "format": "double",
            "type": "number"
          },
          "amount": {
            "description": "The amount of a payment transaction or account balance.",
            "format": "double",
            "type": "number"
          },
          "applyDate": {
            "description": "The date the fee is applied.",
            "format": "date-time",
            "type": "string"
          },
          "autoAssessFlag": {
            "description": "Indicates whether or not the fee item is automatically assessed.",
            "type": "string"
          },
          "autoInvoiceFlag": {
            "description": "Indicates whether or not the fee item is automatically invoiced.",
            "type": "string"
          },
          "balanceDue": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "calcFlag": {
            "description": "Indicates whether or not the fee amount is based on fee calculation.",
            "type": "string"
          },
          "calculatedFlag": {
            "description": "Indicates whether or not the fee amount is based on fee calculation.",
            "type": "string"
          },
          "code": {
            "description": "A code identifying an associated item",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The fee description.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "displayOrder": {
            "description": "The display order of the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "effectDate": {
            "description": "Fee item effective date.",
            "format": "date-time",
            "type": "string"
          },
          "expireDate": {
            "description": "The date when the item expires",
            "format": "date-time",
            "type": "string"
          },
          "feeAllocationType": {
            "description": "The fee allocation type to each account code.",
            "type": "string"
          },
          "feeNotes": {
            "description": "Notes about the fee.",
            "type": "string"
          },
          "id": {
            "description": "The fee system id.",
            "format": "int64",
            "type": "integer"
          },
          "invoiceId": {
            "description": "The invoice ID for the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "maxFee": {
            "description": "The maximum fee item.",
            "format": "double",
            "type": "number"
          },
          "minFee": {
            "description": "The minimum fee item.",
            "format": "double",
            "type": "number"
          },
          "paymentPeriod": {
            "description": "The time interval for processing invoices.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "priority": {
            "description": "The priority level assigned to the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "description": "The number of units for which the same fee applies.",
            "format": "double",
            "type": "number"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "schedule": {
            "description": "The payment schedule name.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The fee item status.",
            "type": "string"
          },
          "subGroup": {
            "description": "The subgroup the fee is associated with.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "udf1": {
            "description": "User defined field 1",
            "type": "string"
          },
          "udf2": {
            "description": "User defined field 2",
            "type": "string"
          },
          "udf3": {
            "description": "User defined field 3",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measure used for the object.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "variable": {
            "description": "The variable associated with the fee item.",
            "type": "string"
          },
          "version": {
            "description": "The payment schedule version",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "feeItemModel_1": {
        "properties": {
          "accountCode1": {
            "description": "The code associated with the first fee",
            "type": "string"
          },
          "accountCode1Allocation": {
            "description": "Allocation proportion or amount of account code 1.",
            "format": "double",
            "type": "number"
          },
          "accountCode2": {
            "description": "The code associated with the second fee",
            "type": "string"
          },
          "accountCode2Allocation": {
            "description": "Allocation proportion or amount of account code 2.",
            "format": "double",
            "type": "number"
          },
          "accountCode3": {
            "description": "The code associated with the third fee",
            "type": "string"
          },
          "accountCode3Allocation": {
            "description": "Allocation proportion or amount of account code 3.",
            "format": "double",
            "type": "number"
          },
          "amount": {
            "description": "The amount of a payment transaction or account balance.",
            "format": "double",
            "type": "number"
          },
          "applyDate": {
            "description": "The date the fee is applied.",
            "format": "date-time",
            "type": "string"
          },
          "auditDate": {
            "description": "The date when the fee item was added or updated.",
            "format": "date-time",
            "type": "string"
          },
          "balanceDue": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "code": {
            "description": "A code identifying an associated item",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "displayOrder": {
            "description": "The display order of the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The fee system id.",
            "format": "int64",
            "type": "integer"
          },
          "invoiceId": {
            "description": "The invoice ID for the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "maxFee": {
            "description": "The maximum fee item.",
            "format": "double",
            "type": "number"
          },
          "minFee": {
            "description": "The minimum fee item.",
            "format": "double",
            "type": "number"
          },
          "notes": {
            "description": "Notes about the fee item.",
            "type": "string"
          },
          "paymentPeriod": {
            "description": "The time interval for processing invoices.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "priority": {
            "description": "The priority level assigned to the fee item.",
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "description": "The number of units for which the same fee applies.",
            "format": "double",
            "type": "number"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "schedule": {
            "description": "The payment schedule name.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The fee item status.",
            "type": "string"
          },
          "subGroup": {
            "description": "The subgroup the fee is associated with.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "udf1": {
            "description": "User defined field 1",
            "type": "string"
          },
          "udf2": {
            "description": "User defined field 2",
            "type": "string"
          },
          "udf3": {
            "description": "User defined field 3",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measure used for the object.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "variable": {
            "description": "The variable associated with the fee item.",
            "type": "string"
          },
          "version": {
            "description": "The payment schedule version",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "fieldModel": {
        "properties": {
          "isRequired": {
            "description": "Indicates whether or not the information is required.",
            "type": "boolean"
          },
          "name": {
            "description": "The field name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "identifierModel1": {
        "properties": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "inspectionBeforeScheduledTime": {
        "description": "Specifies the number of days or hours before the scheduled time on the inspection date.",
        "properties": {
          "days": {
            "description": "Inspections can only be cancelled within this number of days before the scheduled time on the inspection date.",
            "format": "int64",
            "type": "integer"
          },
          "hours": {
            "description": "Inspections can only be cancelled within this number of hours before the scheduled time on the inspection date.",
            "format": "int64",
            "type": "integer"
          },
          "time": {
            "description": "Inspections can only be cancelled within the number of specified days or hours before this time (\"hh:mm AM|PM\") on the inspection date.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "inspectionContactModel": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/ownerAddressModel1"
          },
          "birthCity": {
            "description": "The city of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "The birth date.",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "The country of birth or region of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "The state of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "A secondary business name for the applicable individual.",
            "type": "string"
          },
          "comment": {
            "description": "A comment about the inspection contact.",
            "type": "string"
          },
          "deceasedDate": {
            "description": "The deceased date.",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "The state that issued the driver's license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "Fax Number Country Code",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The contact system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "middleName": {
            "description": "The middle name.\t",
            "type": "string"
          },
          "organizationName": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "passportNumber": {
            "description": "The contact's passport number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "phone1": {
            "description": "The primary telephone number of the contact.",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "Phone Number 1 Country Code",
            "type": "string"
          },
          "phone2": {
            "description": "The secondary telephone number of the contact.",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "Phone Number 2 Country Code",
            "type": "string"
          },
          "phone3": {
            "description": "The tertiary telephone number for the contact.",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "Phone Number 3 Country Code",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "preferredChannel": {
            "description": "The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relation": {
            "description": "The contact's relationship to the application or service request.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier",
            "type": "string"
          },
          "socialSecurityNumber": {
            "description": "The individual's social security number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "The contact's state ID number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "status": {
            "description": "The contact status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "The contact name suffix.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title.",
            "type": "string"
          },
          "tradeName": {
            "description": "The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.",
            "type": "string"
          },
          "type": {
            "description": "The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "inspectionModel": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/recordAddressModel"
          },
          "billable": {
            "description": "This defines whether or not the item is billable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "category": {
            "description": "The inspection category, which is used to organize inspection types. An inspection type is assigned to one or more inspection categories.",
            "type": "string"
          },
          "commentDisplay": {
            "description": "Indicates whether or not Accela Citizen Access users can view the inspection results comments.",
            "type": "string"
          },
          "commentPublicVisible": {
            "description": "Specifies the type of user who can view the inspection result comments. \"All ACA Users\" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. \"Record Creator Only\" - the user who created the record can see the comments for the inspection results. \"Record Creator and Licensed Professional\" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.\t",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "completedAMPM": {
            "description": "Indicates whether completed time is \"AM\" or \"PM\".",
            "type": "string"
          },
          "completedDate": {
            "description": "The date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "completedTime": {
            "description": "The time of completion.",
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/inspectionContactModel"
          },
          "contactFirstName": {
            "description": "The contact's first name. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "contactLastName": {
            "description": "The last name of the contact.",
            "type": "string"
          },
          "contactMiddleName": {
            "description": "The middle name of the contact.",
            "type": "string"
          },
          "desiredAMPM": {
            "description": "Indicates whether the desired inspection time is AM or PM.",
            "type": "string"
          },
          "desiredDate": {
            "description": "The desired inspection date.",
            "format": "date-time",
            "type": "string"
          },
          "desiredTime": {
            "description": "The desired inspection time.",
            "type": "string"
          },
          "endMileage": {
            "description": "The ending mileage for the inspection.",
            "format": "float",
            "type": "number"
          },
          "endTime": {
            "description": "The time the inspection was completed.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedEndTime": {
            "description": "inspection estimated end time.",
            "type": "string"
          },
          "estimatedStartTime": {
            "description": "The scheduled start time for the inspection.",
            "type": "string"
          },
          "floor": {
            "description": "Inspection Floor.",
            "type": "string"
          },
          "floorUnit": {
            "description": "Inspection Floor Unit.",
            "type": "string"
          },
          "gisAreaName": {
            "description": "The GIS Object ID of the parent application if the application that the inspection is scheduled for has a parent application that is a project application.",
            "type": "string"
          },
          "grade": {
            "description": "The name of the inspection grade.",
            "type": "string"
          },
          "id": {
            "description": "The inspection system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inspectorFullName": {
            "description": "The name of the inspector performing the assessment.",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "isAutoAssign": {
            "description": "This defines whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.",
            "type": "string"
          },
          "latitude": {
            "description": "The angular distance of a place north or south of the earth's equator, usually expressed in degrees and minutes.",
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "The angular distance of a place east or west of the meridian at Greenwich, England, usually expressed in degrees and minutes.",
            "format": "float",
            "type": "number"
          },
          "majorViolation": {
            "description": "The number of major violations.",
            "format": "int64",
            "type": "integer"
          },
          "overtime": {
            "description": "A labor cost factor that indicates time worked beyond a worker's regular working hours.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the inspection.",
            "format": "double",
            "type": "number"
          },
          "publicVisible": {
            "description": "This defines whether or not Accela Citizen Access users can view comment about the inspection results.",
            "type": "string"
          },
          "record": {
            "$ref": "#/components/schemas/simpleRecordModel1"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "recordType": {
            "$ref": "#/components/schemas/recordTypeNoAliasModel"
          },
          "requestAMPM": {
            "description": "The time segment, AM or PM, for the time specified in the requestTime field.",
            "type": "string"
          },
          "requestComment": {
            "description": "Comments about the new inspection. For example, you may identify who requested the inspection.",
            "type": "string"
          },
          "requestDate": {
            "description": "The date when an inspection request is submitted.",
            "format": "date-time",
            "type": "string"
          },
          "requestTime": {
            "description": "This time is automatically generated when a new inspection is scheduled and submitted.",
            "type": "string"
          },
          "requestorFirstName": {
            "description": "The first name of the person requesting an inspection-related operation.",
            "type": "string"
          },
          "requestorLastName": {
            "description": "The last name of the person requesting an inspection-related operation.",
            "type": "string"
          },
          "requestorMiddleName": {
            "description": "The middle name of the person requesting an inspection-related operation.",
            "type": "string"
          },
          "requestorPhone": {
            "description": "The telephone number for the person who processes the inspection request or schedules the inspection.",
            "type": "string"
          },
          "requestorPhoneIDD": {
            "description": "The telephone number for the person who processes the inspection request or schedules the inspection.",
            "type": "string"
          },
          "requestorUserId": {
            "description": "The user Id of the person requesting an inspection-related operation.",
            "type": "string"
          },
          "requiredInspection": {
            "description": "This defines whether the inspection is optional or required.",
            "type": "string"
          },
          "resultComment": {
            "description": "The inspection result comments.",
            "type": "string"
          },
          "resultType": {
            "description": "The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app",
            "type": "string"
          },
          "scheduleDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "scheduleEndAMPM": {
            "description": "Indicates whether the scheduleEndTime is in the AM or PM.",
            "enum": [
              "AM",
              "PM"
            ],
            "type": "string"
          },
          "scheduleEndTime": {
            "description": "The scheduled end time for the inspection.",
            "type": "string"
          },
          "scheduleStartAMPM": {
            "description": "AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.",
            "enum": [
              "AM",
              "PM"
            ],
            "type": "string"
          },
          "scheduleStartTime": {
            "description": "The scheduled start time for the inspection.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "startMileage": {
            "description": "The starting mileage for the inspection.",
            "format": "float",
            "type": "number"
          },
          "startTime": {
            "description": "The time when you started the inspection.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The inspection status. See [Get All Inspection Statuses](./api-settings.html#operation/v4.get.settings.inspections.statuses).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "submitAMPM": {
            "description": "The time block for the scheduled inspection.",
            "type": "string"
          },
          "submitDate": {
            "description": "The date that the inspection was submitted.",
            "format": "date-time",
            "type": "string"
          },
          "submitTime": {
            "description": "The time that a new inspection is submitted. Civic Platform generates this value.",
            "type": "string"
          },
          "teamName": {
            "description": "Inspection Team name.",
            "type": "string"
          },
          "totalMileage": {
            "description": "The total mileage for the inspection.",
            "format": "float",
            "type": "number"
          },
          "totalScore": {
            "description": "The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.",
            "format": "int64",
            "type": "integer"
          },
          "totalTime": {
            "description": "The total amount of time used to do an inspection.",
            "format": "double",
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/inspectionTypeSimpleModel"
          },
          "unitNumber": {
            "description": "The number of time units (see timeUnitDuration) comprising an inspection.",
            "type": "string"
          },
          "units": {
            "description": "The amount of time comprising the smallest time unit for conducting an inspection.",
            "format": "double",
            "type": "number"
          },
          "vehicleId": {
            "description": "A number, such as the license plate number or VIN, that identifies the vehicle used to complete an inspection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "inspectionRestrictionModel": {
        "properties": {
          "beforeScheduledTime": {
            "$ref": "#/components/schemas/inspectionBeforeScheduledTime"
          }
        },
        "type": "object"
      },
      "inspectionTypeAssociationsModel": {
        "properties": {
          "standardCommentGroup": {
            "description": "The name of the standard comment group associated with the inspection type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "inspectionTypeModel": {
        "properties": {
          "allowFailChecklistItems": {
            "description": "Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "allowMultiInspections": {
            "description": "Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "associations": {
            "$ref": "#/components/schemas/inspectionTypeAssociationsModel"
          },
          "cancelRestriction": {
            "$ref": "#/components/schemas/inspectionRestrictionModel"
          },
          "carryoverFlag": {
            "description": "Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet. \n\nNULL or empty string : Guidesheet items are not carried over. \n\n\"A\" : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.",
            "enum": [
              null,
              "A"
            ],
            "type": "string"
          },
          "defaultDepartment": {
            "$ref": "#/components/schemas/departmentModel"
          },
          "disciplines": {
            "description": "The inspection disciplines assigned to the inspection type.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "flowEnabledFlag": {
            "description": "Indicates whether or not to include the inspection in the inspection flow process.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "grade": {
            "description": "The name of the inspection grade.",
            "type": "string"
          },
          "group": {
            "description": "The name of a group of inspection types.\t",
            "type": "string"
          },
          "groupName": {
            "description": "The descriptive name associated to an inspection group code.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "guideGroup": {
            "$ref": "#/components/schemas/rGuideSheetGroupModel"
          },
          "hasCancelPermission": {
            "description": "Indicates whether or not the user can reschedule the inspection.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "hasFlowFlag": {
            "description": "Indicates whether or not to include the inspection in the inspection flow process.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "hasNextInspectionAdvance": {
            "description": "Indicates whether or not the next inspection can be scheduled in advance.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "hasReschdulePermission": {
            "description": "Indicates whether or not the user can reschedule the inspection.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "hasSchdulePermission": {
            "description": "Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \"Y\" if result.inspectionTypes.schdulePermission is either \"REQUEST_ONLY_PENDING\", \"REQUEST_SAME_DAY_NEXT_DAY\", or \"SCHEDULE_USING_CALENDAR\". If result.inspectionTypes.schdulePermission is \"NONE\" or null, hasSchdulePermission returns \"N\".",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "id": {
            "description": "The inspection type system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inspectionEditable": {
            "description": "Indicates whether or not inspection result, grade or checklist can be edited.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isAutoAssign": {
            "description": "Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isRequired": {
            "description": "Indicates whether or not the information is required.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "ivrNumber": {
            "description": "The IVR (Interactive Voice Response) number assigned to the inspection type. \n\nAdded in Civic Platform 9.3.0",
            "format": "int64",
            "type": "integer"
          },
          "maxPoints": {
            "description": "The number of points allowed for an inspection, after which the inspection fails.",
            "format": "double",
            "type": "number"
          },
          "priority": {
            "description": "The priority level assigned to the inspection type.",
            "type": "string"
          },
          "publicVisible": {
            "description": "Indicates whether or not Accela Citizen Access users can view comment about the inspection results.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "refereceNumber": {
            "description": "The reference number associated with an inspection.",
            "type": "string"
          },
          "rescheduleRestriction": {
            "$ref": "#/components/schemas/inspectionRestrictionModel"
          },
          "resultGroup": {
            "description": "The name of a grouping of Inspection results, usually indicative of a range of inspection scores.",
            "type": "string"
          },
          "schdulePermission": {
            "description": "Returns one of the scheduling permissions in Citizen Access: \n\nNONE - Does not allow public users to schedule this inspection type online. \n\nREQUEST_ONLY_PENDING - Only allows public users to request for an inspection online. The agency coordinates the appointment for the inspection date and time. \n\nREQUEST_SAME_DAY_NEXT_DAY - Allows public users to request an inspection for the same day, next day, or next available day, based on the inspection type calendar parameters defined on the inspection type. \n\nSCHEDULE_USING_CALENDAR - Allows public users to schedule inspections based on the availability on the inspection type calendar.",
            "type": "string"
          },
          "text": {
            "description": "The localized display text.",
            "type": "string"
          },
          "totalScore": {
            "description": "The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.",
            "format": "int64",
            "type": "integer"
          },
          "totalScoreOption": {
            "description": "Indicates the method for calculating total scores of checklist items. There are four options:  \n\nTOTAL - Gets the total score of all checklists as the inspection score. \n\nMAX - Gets the max score of all checklists as the inspection score. \n\nMIN - Gets the min score of all checklists as the inspection score. \n\nAVG - Gets the average score of all checklists as the inspection score. \n\nSUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.",
            "enum": [
              "TOTAL",
              "MAX",
              "MIN",
              "AVG",
              "SUBTRACT"
            ],
            "type": "string"
          },
          "unitNumber": {
            "description": "The number of time units (see timeUnitDuration) comprising an inspection.",
            "type": "string"
          },
          "units": {
            "description": "The amount of time comprising the smallest time unit for conducting an inspection.",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "The value for the specified parameter.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "inspectionTypeSimpleModel": {
        "properties": {
          "group": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "ivrNumber": {
            "description": "The IVR (Interactive Voice Response) number assigned to the inspection type. \n\nAdded in Civic Platform 9.3.0",
            "format": "int64",
            "type": "integer"
          },
          "text": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "invoiceModel": {
        "properties": {
          "amount": {
            "description": "The invoice fee amount.",
            "format": "double",
            "type": "number"
          },
          "auditStatus": {
            "description": "The audit status of the invoice fee item.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "dueDate": {
            "description": "The invoice due date.",
            "format": "date-time",
            "type": "string"
          },
          "fees": {
            "items": {
              "$ref": "#/components/schemas/feeItemModel"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique id of the invoice.",
            "format": "int64",
            "type": "integer"
          },
          "invBatchDate": {
            "description": "The invoice batch date.",
            "format": "date-time",
            "type": "string"
          },
          "invComment": {
            "description": "A comment related to the invoice.",
            "type": "string"
          },
          "invStatus": {
            "description": "The invoice status.",
            "type": "string"
          },
          "invoiceDate": {
            "description": "The invoice date.",
            "format": "date-time",
            "type": "string"
          },
          "invoiceNumber": {
            "description": "The invoice number string.",
            "type": "string"
          },
          "printed": {
            "description": "Indicates whether or not the invoice is printed.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "udf1": {
            "description": "Invoice user defined field 1.",
            "type": "string"
          },
          "udf2": {
            "description": "Invoice user defined field 2.",
            "type": "string"
          },
          "udf3": {
            "description": "Invoice user defined field 3.",
            "type": "string"
          },
          "udf4": {
            "description": "Invoice user defined field 4.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "licenseProfessionalModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "The third line of the address.",
            "type": "string"
          },
          "birthDate": {
            "description": "The birth date of an individual.",
            "format": "date-time",
            "type": "string"
          },
          "businessLicense": {
            "description": "The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.",
            "type": "string"
          },
          "businessName": {
            "description": "A business name for the applicable individual.",
            "type": "string"
          },
          "businessName2": {
            "description": "A secondary business name for the applicable individual.",
            "type": "string"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "comment": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "expirationDate": {
            "description": "The license expiration date.",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The licensed professional's first name. ",
            "type": "string"
          },
          "fullName": {
            "description": "The licensed professional's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The licensed professional system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the professional as the primary professional.",
            "type": "string"
          },
          "lastName": {
            "description": "The licensed professional's last name. ",
            "type": "string"
          },
          "lastRenewalDate": {
            "description": "The last date for a professionals renewal license.",
            "format": "date-time",
            "type": "string"
          },
          "licenseNumber": {
            "description": "The licensed professional's license number.",
            "type": "string"
          },
          "licenseType": {
            "description": "The type of license held by the professional.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "licensingBoard": {
            "description": "The name of the licensing board that issued the license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "middleName": {
            "description": "The licensed professional's middle name. ",
            "type": "string"
          },
          "originalIssueDate": {
            "description": "The original issuance date of license.",
            "format": "date-time",
            "type": "string"
          },
          "phone1": {
            "description": "The primary phone number of the contact.",
            "type": "string"
          },
          "phone2": {
            "description": "The secondary phone number of the contact.",
            "type": "string"
          },
          "phone3": {
            "description": "The tertiary phone number for the contact.\t",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "referenceLicenseId": {
            "description": "The unique Id generated for a professional stored in the system.",
            "type": "string"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. or Ms. This field is active only when Contact Type = Individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "state": {
            "description": "The state corresponding to the address on record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "The licensed professional's name suffix.",
            "type": "string"
          },
          "title": {
            "description": "The individual's professional title.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "noticeConditionModel": {
        "properties": {
          "actionbyDepartment": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "actionbyUser": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "activeStatus": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "additionalInformation": {
            "type": "string"
          },
          "additionalInformationPlainText": {
            "type": "string"
          },
          "agencyListSQL": {
            "type": "string"
          },
          "appliedDate": {
            "format": "date-time",
            "type": "string"
          },
          "appliedbyDepartment": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "appliedbyUser": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "dispAdditionalInformationPlainText": {
            "type": "string"
          },
          "displayNoticeInAgency": {
            "type": "boolean"
          },
          "displayNoticeInCitizens": {
            "type": "boolean"
          },
          "displayNoticeInCitizensFee": {
            "type": "boolean"
          },
          "displayOrder": {
            "format": "int64",
            "type": "integer"
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "inheritable": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "isIncludeNameInNotice": {
            "type": "boolean"
          },
          "isIncludeShortCommentsInNotice": {
            "type": "boolean"
          },
          "longComments": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "publicDisplayMessage": {
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/capIDModel"
          },
          "resAdditionalInformationPlainText": {
            "type": "string"
          },
          "resolutionAction": {
            "type": "string"
          },
          "serviceProviderCode": {
            "type": "string"
          },
          "serviceProviderCodes": {
            "items": {},
            "type": "string"
          },
          "severity": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "shortComments": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "statusDate": {
            "format": "date-time",
            "type": "string"
          },
          "statusType": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/identifierModel1"
          }
        },
        "type": "object"
      },
      "ownerAddressModel1": {
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "addressLine3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/identifierModel1"
          }
        },
        "type": "object"
      },
      "parcelModel_1": {
        "properties": {
          "block": {
            "type": "string"
          },
          "book": {
            "type": "string"
          },
          "censusTract": {
            "type": "string"
          },
          "councilDistrict": {
            "type": "string"
          },
          "exemptionValue": {
            "format": "double",
            "type": "number"
          },
          "gisSequenceNumber": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "improvedValue": {
            "format": "double",
            "type": "number"
          },
          "isPrimary": {
            "type": "string"
          },
          "landValue": {
            "format": "double",
            "type": "number"
          },
          "legalDescription": {
            "type": "string"
          },
          "lot": {
            "type": "string"
          },
          "mapNumber": {
            "type": "string"
          },
          "mapReferenceInfo": {
            "type": "string"
          },
          "page": {
            "type": "string"
          },
          "parcel": {
            "type": "string"
          },
          "parcelArea": {
            "format": "double",
            "type": "number"
          },
          "parcelNumber": {
            "type": "string"
          },
          "planArea": {
            "type": "string"
          },
          "range": {
            "type": "string"
          },
          "section": {
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "subdivision": {
            "$ref": "#/components/schemas/identifierModel1"
          },
          "supervisorDistrict": {
            "type": "string"
          },
          "township": {
            "type": "string"
          },
          "tract": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "partTransactionModel": {
        "properties": {
          "accountName": {
            "description": "The budget account name associated with the part transaction.",
            "type": "string"
          },
          "accountNumber": {
            "description": "The budget account number associated with the part transaction.",
            "type": "string"
          },
          "comments": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "costTotal": {
            "description": "The total cost of the part transaction.",
            "format": "double",
            "type": "number"
          },
          "hardReservation": {
            "description": "Indicates whether or not the part transaction is a hard reservation. \"Y\": A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \"N\" : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "id": {
            "description": "The part transaction system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "locationId": {
            "description": "The location ID associated with the part transaction.",
            "format": "int64",
            "type": "integer"
          },
          "partBin": {
            "description": "The name of the part bin.",
            "type": "string"
          },
          "partBrand": {
            "description": "The name of the part brand.",
            "type": "string"
          },
          "partDescription": {
            "description": "The description of the part.",
            "type": "string"
          },
          "partId": {
            "description": "The part ID.",
            "format": "int64",
            "type": "integer"
          },
          "partLocation": {
            "description": "The location of the part.",
            "type": "string"
          },
          "partNumber": {
            "description": "The number of the part.",
            "type": "string"
          },
          "quantity": {
            "description": "The number of units for which the same fee applies.",
            "format": "double",
            "type": "number"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "resToPartLocation": {
            "description": "",
            "type": "string"
          },
          "reservationNumber": {
            "description": "The part reservation number.",
            "format": "int64",
            "type": "integer"
          },
          "reservationStatus": {
            "description": "The status of the part reservation.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "status": {
            "description": "The part transaction status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "taxable": {
            "description": "Indicates whether or not the part is taxable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "transactionCost": {
            "description": "The part transaction cost.",
            "format": "double",
            "type": "number"
          },
          "transactionDate": {
            "description": "The part transaction date.",
            "format": "date-time",
            "type": "string"
          },
          "transactionType": {
            "description": "The part transaction type. Possible values: \n\n\"Issue\" : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part. \n\n\"Receive\" : occurs when someone purchases a part or returns a part to a location. \n\n\"Transfer\" : occurs when someone moves a part from one location to another. \n\n\"Adjust\" : occurs when someone makes quantity adjustments for cycle counts. \n\n\"Reserve\" : occurs when someone sets aside parts so they can issue them at a later date.",
            "enum": [
              "Issue",
              "Receive",
              "Transfer",
              "Adjust",
              "Reserve"
            ],
            "type": "string"
          },
          "type": {
            "description": "",
            "properties": {
              "text": {
                "description": "The part transaction type.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitCost": {
            "description": "The unit cost per part.",
            "format": "double",
            "type": "number"
          },
          "unitMeasurement": {
            "description": "The unit of measurement for quantifying the part.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "updatedBy": {
            "description": "The user who last updated the checklist or checklist item.",
            "type": "string"
          },
          "workOrderTaskCode": {
            "description": "The work order task code associated with the part transactionmodel.",
            "type": "string"
          },
          "workOrderTaskCodeIndex": {
            "description": "The work order task code index associated with the part transactionmodel.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "paymentModel": {
        "properties": {
          "amount": {
            "description": "The amount of a payment transaction or account balance.",
            "format": "double",
            "type": "number"
          },
          "amountNotAllocated": {
            "description": "The payment amount which has not been allocated.",
            "format": "double",
            "type": "number"
          },
          "cashierId": {
            "description": "The unique ID associated with the cashier.",
            "type": "string"
          },
          "id": {
            "description": "The payment system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "paymentDate": {
            "description": "The date a payment was entered into the system.",
            "format": "date-time",
            "type": "string"
          },
          "paymentMethod": {
            "description": "Describes the method of payment, for example; credit card, cash, debit card, and so forth.",
            "type": "string"
          },
          "paymentStatus": {
            "description": "Indicates whether or not a payment has been made in full.",
            "type": "string"
          },
          "receiptId": {
            "description": "The unique ID generated for the recipient.",
            "format": "int64",
            "type": "integer"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "transactionCode": {
            "description": "An industry standard code that identifies the type of transaction.",
            "type": "string"
          },
          "transactionId": {
            "description": "A unique number, assigned by the system, that indentifies the transaction.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "rGuideSheetGroupModel": {
        "properties": {
          "id": {
            "description": "The inspection checklist sytem id assigned by the Civic Platform server.",
            "type": "string"
          },
          "text": {
            "description": "The localized display text.",
            "type": "string"
          },
          "value": {
            "description": "The stored value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordAPOCustomFormsModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/recordAddressCustomFormsModel"
            },
            "type": "array"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assets": {
            "items": {
              "$ref": "#/components/schemas/assetMasterModel1"
            },
            "type": "array"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "conditionOfApprovals": {
            "items": {
              "$ref": "#/components/schemas/capConditionModel_2"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/noticeConditionModel"
            },
            "type": "array"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "contact": {
            "items": {
              "$ref": "#/components/schemas/recordContactSimpleModel"
            },
            "type": "array"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "customTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The Civic Platform product  where the application is submitted: \"AA\" : Classic Accela Automation. \"ACA\" : Accela Citizen Access. \"AIVR\" : Accela Integrated Voice Response. \"AMO\" : Accela Mobile Office. \"AV360\" : Accela Asset Management, Accela Land Management.",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "owner": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "parcel": {
            "items": {
              "$ref": "#/components/schemas/parcelModel_1"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "professional": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.\t",
            "format": "date-time",
            "type": "string"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusType": {
            "description": "The record status type.",
            "enum": [
              "APPROVED",
              "CLOSED",
              "COMPLETE",
              "DENIED",
              "INCOMPLETE",
              "OPEN",
              "PENDING",
              "UNASSIGNED",
              "VOID"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalFee": {
            "description": "The total amount of the fees invoiced to the record.",
            "format": "double",
            "type": "number"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The total amount of pay.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "updateDate": {
            "description": "The last update date.",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "The record value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordAdditionalModel": {
        "properties": {
          "buildingCount": {
            "description": "The number of buildings associated with the record.",
            "format": "int64",
            "type": "integer"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "estimatedValue": {
            "description": "The application's estimated value.",
            "format": "double",
            "type": "number"
          },
          "houseUnit": {
            "description": "The house unit associated with the application.",
            "format": "int64",
            "type": "integer"
          },
          "publicOwned": {
            "description": "A flag that indicates whether or not the public owns the item.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdSimpleModel"
          }
        },
        "type": "object"
      },
      "recordAddressCustomFormsModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address.",
            "type": "string"
          },
          "addressTypeFlag": {
            "description": "A code name or an abbreviation of the address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "county": {
            "description": "The name of the county.",
            "type": "string"
          },
          "crossStreetNameEnd": {
            "description": "The ending intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "crossStreetNameStart": {
            "description": "The beginning intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "description": {
            "description": "A description of the address.",
            "type": "string"
          },
          "direction": {
            "description": "The street direction of the primary address associated with the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "distance": {
            "description": "The distance from another landmark used to locate the address.",
            "format": "double",
            "type": "number"
          },
          "houseAlphaEnd": {
            "description": "The ending alphabetic unit in street address.",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "The beginning alphabetic unit in street address.",
            "type": "string"
          },
          "houseFractionEnd": {
            "description": "Ending franction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "houseFractionStart": {
            "description": "Beginning fraction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique address id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inspectionDistrict": {
            "description": "The inspection district where the address is located.",
            "type": "string"
          },
          "inspectionDistrictPrefix": {
            "description": "The prefix for the inspection district where the address is located.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.",
            "type": "string"
          },
          "levelEnd": {
            "description": "The ending level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "levelPrefix": {
            "description": "The prefix for the level numbers (floor numbers) that make up the address.",
            "type": "string"
          },
          "levelStart": {
            "description": "The starting level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "locationType": {
            "description": "The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "neighborhood": {
            "description": "The neighborhood where the address is located.",
            "type": "string"
          },
          "neighborhoodPrefix": {
            "description": "The prefix for neighborhood where the address is located.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "refAddressId": {
            "description": "The reference address id.",
            "format": "int64",
            "type": "integer"
          },
          "secondaryStreet": {
            "description": "This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "type": "string"
          },
          "secondaryStreetNumber": {
            "description": "This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "format": "long",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "state": {
            "description": "The name of the state.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The address status indicating whether the address is active or inactive.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "streetEnd": {
            "description": "The ending number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetEndFrom": {
            "description": "The beginning number of a street end address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetEndTo": {
            "description": "The ending number of a street end address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "description": "The name of the street.",
            "type": "string"
          },
          "streetNameEnd": {
            "description": "The ending street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetNameStart": {
            "description": "The beginning street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetPrefix": {
            "description": "Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \"West\" is the street prefix.",
            "type": "string"
          },
          "streetStart": {
            "description": "The starting number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetStartFrom": {
            "description": "The beginning number of a street start address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetStartTo": {
            "description": "The ending number of a street start address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "description": "The type of street such as \"Lane\" or \"Boulevard\".",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, \"NW\" is the street suffix direction.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "The ending value of a range of unit numbers.",
            "type": "string"
          },
          "unitStart": {
            "description": "The starting value of a range of unit numbers.",
            "type": "string"
          },
          "unitType": {
            "description": "The unit type designation of the address.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "xCoordinate": {
            "description": "The longitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          },
          "yCoordinate": {
            "description": "The latitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "recordAddressModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second line of the address.",
            "type": "string"
          },
          "addressTypeFlag": {
            "description": "A code name or an abbreviation of the address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "county": {
            "description": "The name of the county.",
            "type": "string"
          },
          "crossStreetNameEnd": {
            "description": "The ending intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "crossStreetNameStart": {
            "description": "The beginning intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "description": {
            "description": "A description of the address.",
            "type": "string"
          },
          "direction": {
            "description": "The street direction of the primary address associated with the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "distance": {
            "description": "The distance from another landmark used to locate the address.",
            "format": "double",
            "type": "number"
          },
          "houseAlphaEnd": {
            "description": "The ending alphabetic unit in street address.",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "The beginning alphabetic unit in street address.",
            "type": "string"
          },
          "houseFractionEnd": {
            "description": "Ending franction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "houseFractionStart": {
            "description": "Beginning fraction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique address id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inspectionDistrict": {
            "description": "The inspection district where the address is located.",
            "type": "string"
          },
          "inspectionDistrictPrefix": {
            "description": "The prefix for the inspection district where the address is located.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.",
            "type": "string"
          },
          "levelEnd": {
            "description": "The ending level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "levelPrefix": {
            "description": "The prefix for the level numbers (floor numbers) that make up the address.",
            "type": "string"
          },
          "levelStart": {
            "description": "The starting level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "locationType": {
            "description": "The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "neighborhood": {
            "description": "The neighborhood where the address is located.",
            "type": "string"
          },
          "neighborhoodPrefix": {
            "description": "The prefix for neighborhood where the address is located.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "refAddressId": {
            "description": "The reference address id.",
            "format": "int64",
            "type": "integer"
          },
          "secondaryStreet": {
            "description": "This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "type": "string"
          },
          "secondaryStreetNumber": {
            "description": "This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "format": "long",
            "type": "number"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "state": {
            "description": "The name of the state.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The address status indicating whether the address is active or inactive.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "streetEnd": {
            "description": "The ending number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetEndFrom": {
            "description": "The beginning number of a street end address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetEndTo": {
            "description": "The ending number of a street end address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetName": {
            "description": "The name of the street.",
            "type": "string"
          },
          "streetNameEnd": {
            "description": "The ending street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetNameStart": {
            "description": "The beginning street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetPrefix": {
            "description": "Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \"West\" is the street prefix.",
            "type": "string"
          },
          "streetStart": {
            "description": "The starting number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetStartFrom": {
            "description": "The beginning number of a street start address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetStartTo": {
            "description": "The ending number of a street start address range.",
            "format": "int64",
            "type": "integer"
          },
          "streetSuffix": {
            "description": "The type of street such as \"Lane\" or \"Boulevard\".",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, \"NW\" is the street suffix direction.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "The ending value of a range of unit numbers.",
            "type": "string"
          },
          "unitStart": {
            "description": "The starting value of a range of unit numbers.",
            "type": "string"
          },
          "unitType": {
            "description": "The unit type designation of the address.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "xCoordinate": {
            "description": "The longitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          },
          "yCoordinate": {
            "description": "The latitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "recordCommentModel": {
        "properties": {
          "createdBy": {
            "description": "The user who added the record comment.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the record comment was added.",
            "format": "date-time",
            "type": "string"
          },
          "displayOnInspection": {
            "description": "Indicates whether or not the comment is displayed on inspection.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "id": {
            "description": "The comment system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "text": {
            "description": "The comment text.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordConditionModel": {
        "properties": {
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "activeStatus": {
            "description": "Indicates whether or not the condition is active.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "additionalInformation": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "additionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "appliedDate": {
            "description": "The date the standard condition was applied.",
            "format": "date-time",
            "type": "string"
          },
          "appliedbyDepartment": {
            "description": "The department responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "appliedbyUser": {
            "description": "The staff member responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "dispAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "displayNoticeInAgency": {
            "description": "Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizens": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizensFee": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayOrder": {
            "description": "The display order of the condition in a list.",
            "format": "int64",
            "type": "integer"
          },
          "effectiveDate": {
            "description": "The date when you want the condition to become effective.",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date when the condition expires.",
            "format": "date-time",
            "type": "string"
          },
          "group": {
            "description": "The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The condition system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "inheritable": {
            "description": "This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "isIncludeNameInNotice": {
            "description": "Indicates whether or not to display the condition name in the notice.",
            "type": "boolean"
          },
          "isIncludeShortCommentsInNotice": {
            "description": "Indicates whether or not to display the condition comments in the notice.",
            "type": "boolean"
          },
          "longComments": {
            "description": "Narrative comments to help identify the purpose or uses of the standard condition.",
            "type": "string"
          },
          "name": {
            "description": "The name of the standard condition.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicDisplayMessage": {
            "description": "Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).",
            "type": "string"
          },
          "resAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "resolutionAction": {
            "description": "he action performed in response to a condition.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortComments": {
            "description": "A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it",
            "type": "string"
          },
          "status": {
            "description": "The condition status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "statusType": {
            "description": "The status type for a standard condition or an approval condition, applied or not applied for example.",
            "type": "string"
          },
          "type": {
            "description": "The condition type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "recordContactModel": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/compactAddressModel"
          },
          "birthCity": {
            "description": "The city of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "The birth date.",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "The country of birth or region of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "The state of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "A secondary business name for the applicable individual.",
            "type": "string"
          },
          "comment": {
            "description": "A comment about the inspection contact.",
            "type": "string"
          },
          "deceasedDate": {
            "description": "The deceased date.",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "The state that issued the driver's license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "endDate": {
            "description": "The date when the contact address ceases to be active.",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "Fax Number Country Code",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The contact system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the contact as the primary contact Only one address can be primary at any given time.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "middleName": {
            "description": "The middle name.\t",
            "type": "string"
          },
          "organizationName": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "passportNumber": {
            "description": "The contact's passport number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "phone1": {
            "description": "The primary telephone number of the contact.",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "Phone Number 1 Country Code",
            "type": "string"
          },
          "phone2": {
            "description": "The secondary telephone number of the contact.",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "Phone Number 2 Country Code",
            "type": "string"
          },
          "phone3": {
            "description": "The tertiary telephone number for the contact.",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "Phone Number 3 Country Code",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "preferredChannel": {
            "description": "The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "referenceContactId": {
            "description": "The unique Id generated for a contact stored in the sytem.",
            "type": "string"
          },
          "relation": {
            "description": "The contact's relationship to the application or service request.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "socialSecurityNumber": {
            "description": "The individual's social security number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "startDate": {
            "description": "The date the contact became active.",
            "format": "date-time",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "The contact's state ID number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "status": {
            "description": "The contact status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "The contact name suffix.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title.",
            "type": "string"
          },
          "tradeName": {
            "description": "The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.",
            "type": "string"
          },
          "type": {
            "description": "The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "recordContactSimpleModel": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/compactAddressModel"
          },
          "birthCity": {
            "description": "The city of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthDate": {
            "description": "The birth date.",
            "format": "date-time",
            "type": "string"
          },
          "birthRegion": {
            "description": "The country of birth or region of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "birthState": {
            "description": "The state of birth for an individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "businessName": {
            "description": "A secondary business name for the applicable individual.",
            "type": "string"
          },
          "comment": {
            "description": "A comment about the inspection contact.",
            "type": "string"
          },
          "deceasedDate": {
            "description": "The deceased date.",
            "format": "date-time",
            "type": "string"
          },
          "driverLicenseNumber": {
            "description": "The driver's license number of the contact. This field is active only when the Contact Type selected is Individual.",
            "type": "string"
          },
          "driverLicenseState": {
            "description": "The state that issued the driver's license.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "endDate": {
            "description": "The date when the contact address ceases to be active.",
            "format": "date-time",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "faxCountryCode": {
            "description": "Fax Number Country Code",
            "type": "string"
          },
          "federalEmployerId": {
            "description": "The Federal Employer Identification Number. It is used to identify a business for tax purposes.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. ",
            "type": "string"
          },
          "gender": {
            "description": "The gender (male or female) of the individual.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The contact system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "individualOrOrganization": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the contact as the primary contact Only one address can be primary at any given time.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "middleName": {
            "description": "The middle name.\t",
            "type": "string"
          },
          "organizationName": {
            "description": "The organization to which the contact belongs. This field is only active when the Contact Type selected is Organization.",
            "type": "string"
          },
          "passportNumber": {
            "description": "The contact's passport number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "phone1": {
            "description": "The primary telephone number of the contact.",
            "type": "string"
          },
          "phone1CountryCode": {
            "description": "Phone Number 1 Country Code",
            "type": "string"
          },
          "phone2": {
            "description": "The secondary telephone number of the contact.",
            "type": "string"
          },
          "phone2CountryCode": {
            "description": "Phone Number 2 Country Code",
            "type": "string"
          },
          "phone3": {
            "description": "The tertiary telephone number for the contact.",
            "type": "string"
          },
          "phone3CountryCode": {
            "description": "Phone Number 3 Country Code",
            "type": "string"
          },
          "postOfficeBox": {
            "description": "The post office box number.",
            "type": "string"
          },
          "preferredChannel": {
            "description": "The method by which the contact prefers to be notified, by phone for example. See [Get All Contact Preferred Channels](./api-settings.html#operation/v4.get.settings.contacts.preferredChannels).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "race": {
            "description": "The contact's race or ethnicity. See [Get All Contact Races](./api-settings.html#operation/v4.get.settings.contacts.races).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "referenceContactId": {
            "description": "The unique Id generated for a contact stored in the sytem.",
            "type": "string"
          },
          "relation": {
            "description": "The contact's relationship to the application or service request.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "salutation": {
            "description": "The salutation to be used when addressing the contact; for example Mr. oar Ms. This field is active only when Contact Type = Individual. See [Get All Contact Salutations](./api-settings.html#operation/v4.get.settings.contacts.salutations).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "socialSecurityNumber": {
            "description": "The individual's social security number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "startDate": {
            "description": "The date the contact became active.",
            "format": "date-time",
            "type": "string"
          },
          "stateIdNumber": {
            "description": "The contact's state ID number. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "status": {
            "description": "The contact status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "suffix": {
            "description": "The contact name suffix.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title.",
            "type": "string"
          },
          "tradeName": {
            "description": "The contact's preferred business or trade name. This field is active only when the Contact Type selected is Organization.",
            "type": "string"
          },
          "type": {
            "description": "The contact type. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "recordExtModel_1": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/recordAddressCustomFormsModel"
            },
            "type": "array"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "conditionOfApprovals": {
            "items": {
              "$ref": "#/components/schemas/capConditionModel_2"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/noticeConditionModel"
            },
            "type": "array"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/recordContactSimpleModel"
            },
            "type": "array"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "customTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The Civic Platform product  where the application is submitted: \"AA\" : Classic Accela Automation. \"ACA\" : Accela Citizen Access. \"AIVR\" : Accela Integrated Voice Response. \"AMO\" : Accela Mobile Office. \"AV360\" : Accela Asset Management, Accela Land Management.",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "parcels": {
            "items": {
              "$ref": "#/components/schemas/parcelModel_1"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "professionals": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusType": {
            "description": "The record status type.",
            "enum": [
              "APPROVED",
              "CLOSED",
              "COMPLETE",
              "DENIED",
              "INCOMPLETE",
              "OPEN",
              "PENDING",
              "UNASSIGNED",
              "VOID"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The total amount of pay.",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "updateDate": {
            "description": "The last update date.",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordIdModel": {
        "properties": {
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "description": "The alphanumeric record id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordIdSimpleModel": {
        "properties": {
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "recordInspectionTypeModel": {
        "properties": {
          "inspectionTypes": {
            "items": {
              "$ref": "#/components/schemas/inspectionTypeModel"
            },
            "type": "array"
          },
          "recordId": {
            "description": "The unique ID associated with a record.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/recordAddressModel"
            },
            "type": "array"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assets": {
            "items": {
              "$ref": "#/components/schemas/assetMasterModel1"
            },
            "type": "array"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "conditionOfApprovals": {
            "items": {
              "$ref": "#/components/schemas/capConditionModel_2"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/noticeConditionModel"
            },
            "type": "array"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "contact": {
            "items": {
              "$ref": "#/components/schemas/recordContactSimpleModel"
            },
            "type": "array"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "customTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The Civic Platform product  where the application is submitted: \"AA\" : Classic Accela Automation. \"ACA\" : Accela Citizen Access. \"AIVR\" : Accela Integrated Voice Response. \"AMO\" : Accela Mobile Office. \"AV360\" : Accela Asset Management, Accela Land Management.",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "owner": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "parcel": {
            "items": {
              "$ref": "#/components/schemas/parcelModel_1"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "professional": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.\t",
            "format": "date-time",
            "type": "string"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusType": {
            "description": "The record status type.",
            "enum": [
              "APPROVED",
              "CLOSED",
              "COMPLETE",
              "DENIED",
              "INCOMPLETE",
              "OPEN",
              "PENDING",
              "UNASSIGNED",
              "VOID"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalFee": {
            "description": "The total amount of the fees invoiced to the record.",
            "format": "double",
            "type": "number"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The total amount of pay.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "updateDate": {
            "description": "The last update date.",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "The record value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordParcelModel": {
        "properties": {
          "block": {
            "description": "The block number associated with the parcel.",
            "type": "string"
          },
          "book": {
            "description": "A reference to the physical location of parcel information in the County Assessor's office.",
            "type": "string"
          },
          "censusTract": {
            "description": "The unique number assigned by the Census Bureau that identifies the tract to which this parcel belongs.",
            "type": "string"
          },
          "councilDistrict": {
            "description": "The council district to which the parcel belongs.",
            "type": "string"
          },
          "exemptionValue": {
            "description": "The total value of any tax exemptions that apply to the land within the parcel.",
            "format": "double",
            "type": "number"
          },
          "gisSequenceNumber": {
            "description": "The GIS object ID of the parcel.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The system id of the parcel assigned by the Civic Platform server.",
            "type": "string"
          },
          "improvedValue": {
            "description": "The total value of any improvements to the land within the parcel.",
            "format": "double",
            "type": "number"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the parcel as the primary parcel.",
            "type": "string"
          },
          "landValue": {
            "description": "The total value of the land within the parcel.",
            "format": "double",
            "type": "number"
          },
          "legalDescription": {
            "description": "The legal description of the parcel.",
            "type": "string"
          },
          "lot": {
            "description": "The lot name.",
            "type": "string"
          },
          "mapNumber": {
            "description": "The unique map number that identifies the map for this parcel.",
            "type": "string"
          },
          "mapReferenceInfo": {
            "description": "The map reference for this parcel.",
            "type": "string"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "page": {
            "description": "A reference to the physical location of the parcel information in the records of the County Assessor (or other responsible department).",
            "type": "string"
          },
          "parcel": {
            "description": "The official parcel name or number, as determined by the county assessor or other responsible department.",
            "type": "string"
          },
          "parcelArea": {
            "description": "The total area of the parcel. Your agency determines the standard unit of measure.",
            "format": "double",
            "type": "number"
          },
          "parcelNumber": {
            "description": "The alpha-numeric parcel number.",
            "type": "string"
          },
          "planArea": {
            "description": "The total area of the parcel. Your agency determines the standard unit of measure.",
            "type": "string"
          },
          "range": {
            "description": "When land is surveyed using the rectangular-survey system, range represents the measure of units east and west of the base line.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "section": {
            "description": "A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "The parcel status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "subdivision": {
            "description": "The name of the subdivision.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "supervisorDistrict": {
            "description": "The supervisor district to which the parcel belongs.",
            "type": "string"
          },
          "township": {
            "description": "When land is surveyed using the rectangular-survey system, township represents the measure of units North or South of the base line. Townships typically measure 6 miles to a side, or 36 square miles.",
            "type": "string"
          },
          "tract": {
            "description": "The name of the tract associated with this application. A tract may contain one or more related parcels.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordRelatedModel": {
        "properties": {
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "relationship": {
            "description": "The type of relationship of a related record.",
            "enum": [
              "parent",
              "child",
              "renewal"
            ],
            "type": "string"
          },
          "serviceProveCode": {
            "description": "The unique agency id.",
            "type": "string"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeNoAliasModel"
          }
        },
        "type": "object"
      },
      "recordTypeNoAliasModel": {
        "properties": {
          "category": {
            "description": "The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "filterName": {
            "description": "The name of the record type filter which defines the record types to be displayed for the citizen user.",
            "type": "string"
          },
          "group": {
            "description": "The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "id": {
            "description": "The record type system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "module": {
            "description": "Use to filter by the module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "subType": {
            "description": "The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "text": {
            "description": "The record type display text",
            "type": "string"
          },
          "type": {
            "description": "The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).",
            "type": "string"
          },
          "value": {
            "description": "The record type value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "refOwnerModel": {
        "properties": {
          "email": {
            "description": "The contact's email address.",
            "type": "string"
          },
          "fax": {
            "description": "The fax number for the contact.",
            "type": "string"
          },
          "firstName": {
            "description": "The contact's first name. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "fullName": {
            "description": "The contact's full name. This field is only active when the Contact Type selected is Individual.",
            "type": "string"
          },
          "id": {
            "description": "The owner system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the owner as the primary owner.",
            "type": "string"
          },
          "lastName": {
            "description": "The last name (surname).",
            "type": "string"
          },
          "mailAddress": {
            "$ref": "#/components/schemas/ownerAddressModel1"
          },
          "middleName": {
            "description": "The contact's middle name.",
            "type": "string"
          },
          "parcelId": {
            "description": "The unique Id generated for a parcel.",
            "type": "string"
          },
          "phone": {
            "description": "The telephone number of the owner.",
            "type": "string"
          },
          "phoneCountryCode": {
            "description": "The country code for the assoicated phone number.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "refOwnerId": {
            "description": "The reference owner id.",
            "format": "double",
            "type": "number"
          },
          "status": {
            "description": "The owner status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "taxId": {
            "description": "The owner's tax ID number.",
            "type": "string"
          },
          "title": {
            "description": "The individual's business title.",
            "type": "string"
          },
          "type": {
            "description": "The owner type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_activityAddModel": {
        "properties": {
          "activityStatus": {
            "description": "The status of the record activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedDepartment": {
            "description": "The department responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedUser": {
            "description": "The staff member responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The activity description",
            "type": "string"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The activity name.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "startDate": {
            "description": "The activity start date.",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "The activity type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "request_activityUpdateModel": {
        "properties": {
          "activityStatus": {
            "description": "The status of the record activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedDepartment": {
            "description": "The department responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedUser": {
            "description": "The staff member responsible for the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The activity description",
            "type": "string"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "The activity name.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the activity.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "startDate": {
            "description": "The activity start date.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The activity status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The activity type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "request_costingModelArray": {
        "properties": {
          "comments": {
            "description": "Comments about the cost.",
            "type": "string"
          },
          "costAccount": {
            "description": "The cost account name.",
            "type": "string"
          },
          "costDate": {
            "description": "The date when the cost applied.",
            "format": "date-time",
            "type": "string"
          },
          "costFactor": {
            "description": "The cost factor.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "costItem": {
            "description": "The cost item name.",
            "type": "string"
          },
          "dispCostingCostItem": {
            "description": "The cost item display name.",
            "type": "string"
          },
          "distributeFlag": {
            "description": "Indicates whether or not costing is distributed.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "endTime": {
            "description": "The end time associated to the cost item.",
            "type": "string"
          },
          "fixedRate": {
            "description": "The fixed rate associated to the cost item.",
            "format": "double",
            "type": "number"
          },
          "id": {
            "description": "The cost item system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "description": "The cost item quantity.",
            "format": "double",
            "type": "number"
          },
          "quantityDetail": {
            "description": "Details about the cost item quantity.",
            "type": "string"
          },
          "quantityDetailList": {
            "$ref": "#/components/schemas/costingQuantityModel"
          },
          "relatedAsgnNbr": {
            "description": "Related cost item.",
            "format": "int64",
            "type": "integer"
          },
          "startTime": {
            "description": "The start time associated to the cost item.",
            "type": "string"
          },
          "status": {
            "description": "The cost item status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "totalCost": {
            "description": "The total cost.",
            "format": "double",
            "type": "number"
          },
          "type": {
            "description": "The cost item type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitOfMeasure": {
            "description": "The cost item's unit of measure.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitRate": {
            "description": "The cost unit rate.",
            "format": "double",
            "type": "number"
          },
          "workOrderTaskCode": {
            "description": "The work order task code associated to the cost item.",
            "type": "string"
          },
          "workOrderTaskCodeIndex": {
            "description": "The order of the work order task.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "request_createRecordModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/recordAddressModel"
            },
            "type": "array"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "conditionOfApprovals": {
            "items": {
              "$ref": "#/components/schemas/capConditionModel_2"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/noticeConditionModel"
            },
            "type": "array"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "contacts": {
            "items": {
              "$ref": "#/components/schemas/recordContactSimpleModel"
            },
            "type": "array"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "customTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The product or app that created the record. If initiatedProduct is null or not specified in the request, the default is \"AV360\" (Civic Platform application).\n\nAdded in Civic Platform version: 9.2.0",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "parcels": {
            "items": {
              "$ref": "#/components/schemas/parcelModel_1"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "professionals": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusType": {
            "description": "The record status type.",
            "enum": [
              "APPROVED",
              "CLOSED",
              "COMPLETE",
              "DENIED",
              "INCOMPLETE",
              "OPEN",
              "PENDING",
              "UNASSIGNED",
              "VOID"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The total amount of pay.",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "updateDate": {
            "description": "The last update date.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "request_recordAddressModel": {
        "properties": {
          "addressLine1": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "The first line of the address.",
            "type": "string"
          },
          "addressTypeFlag": {
            "description": "A code name or an abbreviation of the address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "city": {
            "description": "The name of the city.",
            "type": "string"
          },
          "country": {
            "description": "The name of the country. See [Get All Address Countries](./api-settings.html#operation/v4.get.settings.addresses.countries).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "county": {
            "description": "The name of the county.",
            "type": "string"
          },
          "crossStreetNameEnd": {
            "description": "The ending intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "crossStreetNameStart": {
            "description": "The beginning intersecting street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "description": {
            "description": "A description of the address.",
            "type": "string"
          },
          "direction": {
            "description": "The street direction of the primary address associated with the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "distance": {
            "description": "The distance from another landmark used to locate the address.",
            "format": "double",
            "type": "number"
          },
          "houseAlphaEnd": {
            "description": "The ending alphabetic unit in street address.",
            "type": "string"
          },
          "houseAlphaStart": {
            "description": "The beginning alphabetic unit in street address.",
            "type": "string"
          },
          "houseFractionEnd": {
            "description": "Ending franction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "houseFractionStart": {
            "description": "Beginning fraction value used in combination with the Street number fields.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "inspectionDistrict": {
            "description": "The inspection district where the address is located.",
            "type": "string"
          },
          "inspectionDistrictPrefix": {
            "description": "The prefix for the inspection district where the address is located.",
            "type": "string"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.",
            "type": "string"
          },
          "levelEnd": {
            "description": "The ending level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "levelPrefix": {
            "description": "The prefix for the level numbers (floor numbers) that make up the address.",
            "type": "string"
          },
          "levelStart": {
            "description": "The starting level number (floor number) that makes up the address within a complex.",
            "type": "string"
          },
          "locationType": {
            "description": "The type of location used for Right of Way Management. The valid values are configured with the LOCATION_TYPE standard choice in Civic Platform Administration.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "neighborhood": {
            "description": "The neighborhood where the address is located.",
            "type": "string"
          },
          "neighborhoodPrefix": {
            "description": "The prefix for neighborhood where the address is located.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal ZIP code for the address.",
            "type": "string"
          },
          "secondaryStreet": {
            "description": "This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "type": "string"
          },
          "secondaryStreetNumber": {
            "description": "This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.",
            "format": "long",
            "type": "number"
          },
          "state": {
            "description": "The name of the state.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "The address status indicating whether the address is active or inactive.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "streetEnd": {
            "description": "The ending number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetName": {
            "description": "The name of the street.",
            "type": "string"
          },
          "streetNameEnd": {
            "description": "The ending street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetNameStart": {
            "description": "The beginning street name for searching.\n\nAdded in Civic Platform version: 9.2.0\n",
            "type": "string"
          },
          "streetPrefix": {
            "description": "Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \"West\" is the street prefix.",
            "type": "string"
          },
          "streetStart": {
            "description": "The starting number of a street address range.",
            "format": "long",
            "type": "number"
          },
          "streetSuffix": {
            "description": "The type of street such as \"Lane\" or \"Boulevard\".",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "streetSuffixDirection": {
            "description": "The direction appended to the street suffix. For example, if the address is 500 56th Avenue NW, \"NW\" is the street suffix direction.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "The address type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "unitEnd": {
            "description": "The ending value of a range of unit numbers.",
            "type": "string"
          },
          "unitStart": {
            "description": "The starting value of a range of unit numbers.",
            "type": "string"
          },
          "unitType": {
            "description": "The unit type designation of the address.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "xCoordinate": {
            "description": "The longitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          },
          "yCoordinate": {
            "description": "The latitudinal coordinate for this address.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "request_recordConditionModel": {
        "properties": {
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "activeStatus": {
            "description": "Indicates whether or not the condition is active.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "additionalInformation": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "additionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "appliedDate": {
            "description": "The date the standard condition was applied.",
            "format": "date-time",
            "type": "string"
          },
          "appliedbyDepartment": {
            "description": "The department responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "appliedbyUser": {
            "description": "The staff member responsible for applying a condition.\t",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "conditionNumber": {
            "description": "The condition sequence number.",
            "format": "int64",
            "type": "integer"
          },
          "dispAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "displayNoticeInAgency": {
            "description": "Indicates whether or not to display the condition notice in Accela Automation when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizens": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayNoticeInCitizensFee": {
            "description": "Indicates whether or not to display the condition notice in Accela Citizen Access Fee Estimate page when a condition to a record or parcel is applied.",
            "type": "boolean"
          },
          "displayOrder": {
            "description": "The display order of the condition in a list.",
            "format": "int64",
            "type": "integer"
          },
          "effectiveDate": {
            "description": "The date when you want the condition to become effective.",
            "format": "date-time",
            "type": "string"
          },
          "expirationDate": {
            "description": "The date when the condition expires.",
            "format": "date-time",
            "type": "string"
          },
          "group": {
            "description": "The condition group is an attribute of a condition that organizes condition types. Your agency defines these groups.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "inheritable": {
            "description": "This defines whether or not Accela Automation checks for inheritable conditions when a user associates a child record with a parent record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "isIncludeNameInNotice": {
            "description": "Indicates whether or not to display the condition name in the notice.",
            "type": "boolean"
          },
          "isIncludeShortCommentsInNotice": {
            "description": "Indicates whether or not to display the condition comments in the notice.",
            "type": "boolean"
          },
          "longComments": {
            "description": "Narrative comments to help identify the purpose or uses of the standard condition.",
            "type": "string"
          },
          "name": {
            "description": "The name of the standard condition.",
            "type": "string"
          },
          "priority": {
            "description": "The priority level assigned to the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicDisplayMessage": {
            "description": "Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Accela Citizen Access (ACA).",
            "type": "string"
          },
          "resAdditionalInformationPlainText": {
            "description": "An unlimited text field to use if other fields are filled.",
            "type": "string"
          },
          "resolutionAction": {
            "description": "he action performed in response to a condition.",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortComments": {
            "description": "A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it",
            "type": "string"
          },
          "status": {
            "description": "The condition status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "statusType": {
            "description": "The status type for a standard condition or an approval condition, applied or not applied for example.",
            "type": "string"
          },
          "type": {
            "description": "The condition type.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "request_recordModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/recordAddressModel"
            },
            "type": "array"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "contact": {
            "$ref": "#/components/schemas/recordContactModel"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customForms": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "customTables": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The product or app that created the record. If initiatedProduct is null or not specified in the request, the default is \"AV360\" (Civic Platform application).\n\nAdded in Civic Platform version: 9.2.0",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "owner": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "parcel": {
            "items": {
              "$ref": "#/components/schemas/parcelModel_1"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "professional": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "request_simpleRecordModel": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "totalFee": {
            "description": "The total amount of the fees invoiced to the record.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The total amount of pay.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "request_taskItemModel": {
        "properties": {
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "approval": {
            "description": "Used to indicate supervisory approval of an adhoc task.",
            "type": "string"
          },
          "assignEmailDisplay": {
            "description": "Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.",
            "type": "string"
          },
          "billable": {
            "description": "Indicates whether or not the item is billable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "comment": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "commentDisplay": {
            "description": "Indicates whether or not Accela Citizen Access users can view the inspection results comments.\t",
            "type": "string"
          },
          "commentPublicVisible": {
            "description": "Specifies the type of user who can view the inspection result comments. <br/>\"All ACA Users\" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>\"Record Creator Only\" - the user who created the record can see the comments for the inspection results. <br/>\"Record Creator and Licensed Professional\" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "description": "The time the workflow task was completed.",
            "format": "date-time",
            "type": "string"
          },
          "hoursSpent": {
            "description": "Number of hours used for a workflow or workflow task.",
            "format": "double",
            "type": "number"
          },
          "overTime": {
            "description": "A labor cost factor that indicates time worked beyond a worker's regular working hours.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the workflow task started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The workflow task status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "response_activityModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/activityModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_apo_customForms": {
        "description": "APO custom forms response. \n\nAdded in Civic Platform version: 9.2.0",
        "properties": {
          "apo_customForms": {
            "items": {
              "$ref": "#/components/schemas/apo_customForm"
            },
            "type": "array"
          },
          "status": {
            "description": "The return status code.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_apo_customForms_metadata": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/apo_customForms_metadata"
            },
            "type": "array"
          },
          "status": {
            "description": "The return status code.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_assetMasterModelArray1": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/assetMasterModel1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_contactAddressArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/contactAddress"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_costingModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/costingModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_customAttributeModelArray1": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/customAttributeModel1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_customFormMetadataModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/customFormMetadataModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_customFormSubgroupModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/customFormSubgroupModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_describeRecordModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/describeRecordModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_documentTypeModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/documentTypeModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_estimateFeeModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/estimateFeeModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_feeItemModel_1Array": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/feeItemModel_1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_identifierModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/identifierModel1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_inspectionModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/inspectionModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_invoiceModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/invoiceModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_licenseProfessionalModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/licenseProfessionalModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_licenseProfessionalModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/licenseProfessionalModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_partTransactionModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/partTransactionModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_paymentModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/paymentModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordAdditionalModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordAdditionalModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordAddressModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordAddressModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordCommentModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/recordCommentModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordCommentModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordCommentModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordConditionModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordConditionModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordContactSimpleModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordContactSimpleModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordExtModel_1Array": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordExtModel_1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordInspectionTypeModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordInspectionTypeModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordAPOCustomFormsModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordParcelModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordParcelModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_recordRelatedModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/recordRelatedModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_refOwnerModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/refOwnerModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_refOwnerModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/refOwnerModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_simpleRecordModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/simpleRecordModel1"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_simpleRecordModelArray1": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/simpleRecordModel1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_tableModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/tableModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_taskItemActionModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/taskItemActionModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_taskItemModel": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/taskItemModel"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_taskItemModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/taskItemModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_trustAccountModelArray1": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/trustAccountModel1"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_voteResult": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/voteResult"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_voteSummary": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/voteSummary"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "response_workflowTaskCommentModelArray": {
        "properties": {
          "result": {
            "items": {
              "$ref": "#/components/schemas/workflowTaskCommentModel"
            },
            "type": "array"
          },
          "status": {
            "description": "The HTTP return status.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "simpleRecordModel1": {
        "properties": {
          "actualProductionUnit": {
            "description": "Estimated cost per production unit.",
            "format": "double",
            "type": "number"
          },
          "appearanceDate": {
            "description": "The date for a hearing appearance.",
            "format": "date-time",
            "type": "string"
          },
          "appearanceDayOfWeek": {
            "description": "The day for a hearing appearance.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date the application was assigned.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "type": "string"
          },
          "balance": {
            "description": "The amount due.",
            "format": "double",
            "type": "number"
          },
          "booking": {
            "description": "Indicates whether or not there was a booking in addition to a citation.",
            "type": "boolean"
          },
          "closedByDepartment": {
            "description": "The department responsible for closing the record. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "closedByUser": {
            "description": "The staff member responsible for closure.",
            "type": "string"
          },
          "closedDate": {
            "description": "The date the application was closed.",
            "format": "date-time",
            "type": "string"
          },
          "completeDate": {
            "description": "The date the application was completed.",
            "format": "date-time",
            "type": "string"
          },
          "completedByDepartment": {
            "description": "The department responsible for completion. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "completedByUser": {
            "description": "The staff member responsible for completion.",
            "type": "string"
          },
          "constructionType": {
            "description": "The US Census Bureau construction type code. See [Get All Record Construction Types](./api-settings.html#operation/v4.get.settings.records.constructionTypes).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "costPerUnit": {
            "description": "The cost for one unit associated to the record.",
            "format": "double",
            "type": "number"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdByCloning": {
            "description": "Indictes whether or not the record was cloned.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "customId": {
            "description": "An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Civic Platform auto-generates and applies an alternate ID value when you submit a new application.",
            "type": "string"
          },
          "defendantSignature": {
            "description": "Indicates whether or not a defendant's signature has been obtained.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "enforceDepartment": {
            "description": "The name of the department responsible for enforcement. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "enforceUser": {
            "description": "Name of the enforcement officer.",
            "type": "string"
          },
          "enforceUserId": {
            "description": "ID number of the enforcement officer.",
            "type": "string"
          },
          "estimatedCostPerUnit": {
            "description": "The estimated cost per unit.",
            "format": "double",
            "type": "number"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedProductionUnit": {
            "description": "The estimated number of production units.",
            "format": "double",
            "type": "number"
          },
          "estimatedTotalJobCost": {
            "description": "The estimated cost of the job.",
            "format": "double",
            "type": "number"
          },
          "firstIssuedDate": {
            "description": "The first issued date for license",
            "format": "date-time",
            "type": "string"
          },
          "housingUnits": {
            "description": "The number of housing units.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The record system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "infraction": {
            "description": "Indicates whether or not an infraction occurred.",
            "type": "boolean"
          },
          "initiatedProduct": {
            "description": "The Civic Platform product  where the application is submitted: \"AA\" : Classic Accela Automation. \"ACA\" : Accela Citizen Access. \"AIVR\" : Accela Integrated Voice Response. \"AMO\" : Accela Mobile Office. \"AV360\" : Accela Asset Management, Accela Land Management.",
            "type": "string"
          },
          "inspectorDepartment": {
            "description": "The name of the department where the inspector works. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments).",
            "type": "string"
          },
          "inspectorId": {
            "description": "The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "inspectorName": {
            "description": "The name of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).",
            "type": "string"
          },
          "jobValue": {
            "description": "The value of the job.",
            "format": "double",
            "type": "number"
          },
          "misdemeanor": {
            "description": "Indicates whether or not a misdemeanor occurred.",
            "type": "boolean"
          },
          "module": {
            "description": "The module the record belongs to. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules).",
            "type": "string"
          },
          "name": {
            "description": "The name associated to the record.",
            "type": "string"
          },
          "numberOfBuildings": {
            "description": "The number of buildings.",
            "format": "int64",
            "type": "integer"
          },
          "offenseWitnessed": {
            "description": "Indicates whether or not  there was a witness to the alleged offense.",
            "type": "boolean"
          },
          "openedDate": {
            "description": "The date the application was opened.",
            "format": "date-time",
            "type": "string"
          },
          "overallApplicationTime": {
            "description": "The amount of elapsed time from the time tracking start date to the completion of the application.",
            "format": "double",
            "type": "number"
          },
          "priority": {
            "description": "The priority level assigned to the record. See [Get All Priorities](./api-settings.html#operation/v4.get.settings.priorities).",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "publicOwned": {
            "description": "Indicates whether or not the record is for the public.",
            "type": "boolean"
          },
          "recordClass": {
            "description": "General information about the record.",
            "type": "string"
          },
          "renewalInfo": {
            "$ref": "#/components/schemas/recordExpirationModel"
          },
          "reportedChannel": {
            "description": "The incoming channel through which the applicant submitted the application.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "reportedDate": {
            "description": "The date the complaint was reported.",
            "format": "date-time",
            "type": "string"
          },
          "reportedType": {
            "description": "The type of complaint or incident being reported.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "scheduledDate": {
            "description": "The date when the inspection gets scheduled.",
            "format": "date-time",
            "type": "string"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier,",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity of the condition.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "shortNotes": {
            "description": "A brief note about the record subject.",
            "type": "string"
          },
          "status": {
            "description": "The record status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.\t",
            "format": "date-time",
            "type": "string"
          },
          "statusReason": {
            "description": "\tThe reason for the status setting on the record.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "totalFee": {
            "description": "The total amount of the fees invoiced to the record.",
            "format": "double",
            "type": "number"
          },
          "totalJobCost": {
            "description": "The combination of work order assignments (labor) and costs.",
            "format": "double",
            "type": "number"
          },
          "totalPay": {
            "description": "The total amount of pay.",
            "format": "double",
            "type": "number"
          },
          "trackingId": {
            "description": "The application tracking number (IVR tracking number).",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/recordTypeModel"
          },
          "undistributedCost": {
            "description": "The undistributed costs for this work order.",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "The record value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "taskItemActionModel": {
        "properties": {
          "action": {
            "description": "Audit trail action type like \"payment allocation\"",
            "type": "string"
          },
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "approval": {
            "description": "Used to indicate supervisory approval of an adhoc task.",
            "type": "string"
          },
          "assignEmailDisplay": {
            "description": "Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date of the assigned action.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "billable": {
            "description": "Indicates whether or not the item is billable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "comment": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "commentDisplay": {
            "description": "Indicates whether or not Accela Citizen Access users can view the inspection results comments.\t",
            "type": "string"
          },
          "commentPublicVisible": {
            "description": "Specifies the type of user who can view the inspection result comments. <br/>\"All ACA Users\" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>\"Record Creator Only\" - the user who created the record can see the comments for the inspection results. <br/>\"Record Creator and Licensed Professional\" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "currentTaskId": {
            "description": "The ID of the current workflow task.",
            "type": "string"
          },
          "daysDue": {
            "description": "The amount of time to complete a task (measured in days).",
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "dispositionNote": {
            "description": "A note describing the disposition of the current task.",
            "type": "string"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "description": "The time the workflow task was completed.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedHours": {
            "description": "The estimated hours necessary to complete this task.",
            "format": "double",
            "type": "number"
          },
          "hoursSpent": {
            "description": "Number of hours used for a workflow or workflow task.",
            "format": "double",
            "type": "number"
          },
          "id": {
            "description": "The workflow task system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "isActive": {
            "description": "Indicates whether or not the workflow task is active.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isCompleted": {
            "description": "Indicates whether or not the workflow task is completed.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "lastModifiedDate": {
            "description": "The date when the task item was last changed.",
            "format": "date-time",
            "type": "string"
          },
          "lastModifiedDateString": {
            "description": "A string represents the date when the task item was last changed.",
            "type": "string"
          },
          "nextTaskId": {
            "description": "The id of the next task in a workflow.",
            "type": "string"
          },
          "overTime": {
            "description": "A labor cost factor that indicates time worked beyond a worker's regular working hours.",
            "type": "string"
          },
          "processCode": {
            "description": "The process code for the next task in a workflow.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the workflow task started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The workflow task status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "trackStartDate": {
            "description": "The date that time tracking is set to begin.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "taskItemModel": {
        "properties": {
          "actionbyDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "actionbyUser": {
            "description": "The individual responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "approval": {
            "description": "Used to indicate supervisory approval of an adhoc task.",
            "type": "string"
          },
          "assignEmailDisplay": {
            "description": "Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.",
            "type": "string"
          },
          "assignedDate": {
            "description": "The date of the assigned action.",
            "format": "date-time",
            "type": "string"
          },
          "assignedToDepartment": {
            "description": "The department responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignedUser": {
            "description": "The staff member responsible for the action.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "billable": {
            "description": "Indicates whether or not the item is billable.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "comment": {
            "description": "Comments or notes about the current context.",
            "type": "string"
          },
          "commentDisplay": {
            "description": "Indicates whether or not Accela Citizen Access users can view the inspection results comments.\t",
            "type": "string"
          },
          "commentPublicVisible": {
            "description": "Specifies the type of user who can view the inspection result comments. <br/>\"All ACA Users\" - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. <br/>\"Record Creator Only\" - the user who created the record can see the comments for the inspection results. <br/>\"Record Creator and Licensed Professional\" - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "currentTaskId": {
            "description": "The ID of the current workflow task.",
            "type": "string"
          },
          "daysDue": {
            "description": "The amount of time to complete a task (measured in days).",
            "format": "int64",
            "type": "integer"
          },
          "description": {
            "description": "The description of the record or item.",
            "type": "string"
          },
          "dispositionNote": {
            "description": "A note describing the disposition of the current task.",
            "type": "string"
          },
          "dueDate": {
            "description": "The desired completion date of the task.",
            "format": "date-time",
            "type": "string"
          },
          "endTime": {
            "description": "The time the workflow task was completed.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedDueDate": {
            "description": "The estimated date of completion.",
            "format": "date-time",
            "type": "string"
          },
          "estimatedHours": {
            "description": "The estimated hours necessary to complete this task.",
            "format": "double",
            "type": "number"
          },
          "hoursSpent": {
            "description": "Number of hours used for a workflow or workflow task.",
            "format": "double",
            "type": "number"
          },
          "id": {
            "description": "The workflow task system id assigned by the Civic Platform server.",
            "type": "string"
          },
          "inPossessionTime": {
            "description": "The application level in possession time of the time tracking feature.",
            "format": "double",
            "type": "number"
          },
          "isActive": {
            "description": "Indicates whether or not the workflow task is active.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "isCompleted": {
            "description": "Indicates whether or not the workflow task is completed.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "lastModifiedDate": {
            "description": "The date when the task item was last changed.",
            "format": "date-time",
            "type": "string"
          },
          "lastModifiedDateString": {
            "description": "A string represents the date when the task item was last changed.",
            "type": "string"
          },
          "nextTaskId": {
            "description": "The id of the next task in a workflow.",
            "type": "string"
          },
          "overTime": {
            "description": "A labor cost factor that indicates time worked beyond a worker's regular working hours.",
            "type": "string"
          },
          "processCode": {
            "description": "The process code for the next task in a workflow.",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the workflow task started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The workflow task status.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "statusDate": {
            "description": "The date when the current status changed.",
            "format": "date-time",
            "type": "string"
          },
          "trackStartDate": {
            "description": "The date that time tracking is set to begin.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "trustAccountModel1": {
        "properties": {
          "account": {
            "description": "The account ID number for the trust account.",
            "type": "string"
          },
          "associations": {
            "description": "The trust account associations.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "balance": {
            "description": "The balance of the trust account in dollars.",
            "format": "double",
            "type": "number"
          },
          "description": {
            "description": "The description of the trust account.",
            "type": "string"
          },
          "id": {
            "description": "The trust account system id assigned by the Civic Platform server.",
            "format": "int64",
            "type": "integer"
          },
          "isPrimary": {
            "description": "Indicates whether or not to designate the trust account as the primary source.",
            "enum": [
              "Y",
              "N"
            ],
            "type": "string"
          },
          "ledgerAccount": {
            "description": "The ledger account of the trust account.",
            "type": "string"
          },
          "overdraft": {
            "description": "Indicates whether or not the trust account can use the overdraft option.",
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "overdraftLimit": {
            "description": "The overdraft limit amount, in dollars, for the trust account.",
            "format": "double",
            "type": "number"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "serviceProviderCode": {
            "description": "The unique agency identifier.",
            "type": "string"
          },
          "status": {
            "description": "The status of the trust account.",
            "enum": [
              "Active",
              "Closed"
            ],
            "properties": {
              "text": {
                "description": "The localized display value.",
                "type": "string"
              },
              "value": {
                "description": "The data value.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "thresholdAmount": {
            "description": "The minimum amount required in a trust account.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "voteRequest": {
        "properties": {
          "vote": {
            "description": "The vote on a record (agenda item in a hearing, for example). A value of true is a \"yea\" vote and a value of false indicates a \"nay\" vote.",
            "type": "boolean"
          }
        },
        "required": [
          "vote"
        ],
        "type": "object"
      },
      "voteResult": {
        "properties": {
          "vote": {
            "description": "The result of a vote on a record (agenda item in a hearing, for example). A value of true is a \"yea\" vote and a value of false indicates a \"nay\" vote.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "voteSummary": {
        "properties": {
          "downCount": {
            "description": "The number of votes that disapprove the specified record.",
            "type": "integer"
          },
          "upCount": {
            "description": "The number of votes that approve the specified record.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "workflowTaskCommentModel": {
        "properties": {
          "action": {
            "description": "Audit trail action type like 'payment allocation'",
            "type": "string"
          },
          "createdBy": {
            "description": "The unique user id of the individual that created the entry.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date the entry was created.",
            "format": "date-time",
            "type": "string"
          },
          "recordId": {
            "$ref": "#/components/schemas/recordIdModel"
          },
          "text": {
            "description": "The comment text.",
            "type": "string"
          },
          "workflowTaskId": {
            "description": "The id of the workflow task.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "parameters": {
      "assessmentIdPathParam": {
        "description": "The ID of the assessment to fetch.",
        "in": "path",
        "name": "assessmentId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "assetIdPathParam": {
        "description": "The ID of the asset to fetch. See [Get All Assets](./api-assets-assessments.html#operation/v4.get.assets).",
        "in": "path",
        "name": "assetId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "assetIdQueryParam": {
        "description": "Filter by asset ID.",
        "in": "query",
        "name": "assetId",
        "schema": {
          "type": "string"
        }
      },
      "authHeaderParam": {
        "description": "Construct oAuth2 authentication token",
        "in": "header",
        "name": "Authorization",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored.",
        "in": "query",
        "name": "fields",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "idAssessmentPathParam": {
        "description": "The ID of the condition assessment to fetch.",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "idAssetPathParam": {
        "description": "The ID of the asset to fetch. See [Get All Assets](./api-assets-assessments.html#operation/v4.get.assets).",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "lang": {
        "description": "Language parameter to support I18N. Default language is en_US.",
        "in": "query",
        "name": "lang",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "description": "Search result size limit.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "format": "int64",
          "type": "integer"
        }
      },
      "offset": {
        "description": "The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "format": "int64",
          "type": "integer"
        }
      },
      "contactId": {
        "description": "The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).",
        "in": "path",
        "name": "contactId",
        "required": true,
        "schema": {
          "format": "int64",
          "type": "integer"
        }
      },
      "recordId": {
        "description": "The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).",
        "in": "path",
        "name": "recordId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "v4.post.assets.assetId.documents": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "properties": {
                "fileInfo": {
                  "description": "A string array containing the file metadata for each specified filename. See example for details.",
                  "type": "string"
                }
              },
              "required": [
                "fileInfo"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      }
    }
  }
}